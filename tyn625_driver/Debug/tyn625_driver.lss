
tyn625_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000630  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  000006a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f4b  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081e  00000000  00000000  00001737  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000939  00000000  00000000  00001f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00002890  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058c  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000426  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003476  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  88:	0c 94 16 03 	jmp	0x62c	; 0x62c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_setup>:
#include "adc.h"

void adc_setup(void)
{
	/* Seleção de modo de tensão de referência. */
	ADMUX |= (1 << REFS0); // Utiliza Avcc como referência
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	
	/* Seleção das portas ligadas ao mux */
	//ADMUX |= (1 << MUX1); // ADC2
	
	/* Setup do prescaler, deve estar entre 50 KHz e 200 KHz */
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // Para 8 MHz, um divisor de 64 gera 125 KHz
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	86 60       	ori	r24, 0x06	; 6
  a2:	80 83       	st	Z, r24
	/* Seleciona modo de funcionamento do ADC. */
	//ADCSRA |= (1 << ADATE); // Ativa auto trigger do ADC
	//ADCSRB = 0x00; // Modo Free Running
	
	/* Ativa o ADC */
	ADCSRA |= (1 << ADEN);
  a4:	80 81       	ld	r24, Z
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <adc_read>:
}


uint16_t adc_read(uint8_t adc_pin) {
	// seleção do pino no mux do adc
	ADMUX	&=	0xF0;
  ac:	ec e7       	ldi	r30, 0x7C	; 124
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	90 7f       	andi	r25, 0xF0	; 240
  b4:	90 83       	st	Z, r25
	ADMUX	|=	adc_pin;
  b6:	90 81       	ld	r25, Z
  b8:	89 2b       	or	r24, r25
  ba:	80 83       	st	Z, r24

	// inicia a conversão
	ADCSRA |=  (1 << ADSC);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24

	// loop para aguardar o fim da conversão
	while ( (ADCSRA & (1 << ADSC)) );
  c6:	80 81       	ld	r24, Z
  c8:	86 fd       	sbrc	r24, 6
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <adc_read+0x1a>

	return ADC;
  cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d4:	08 95       	ret

000000d6 <main>:
volatile uint8_t timer2_flag;

inline void clock_setup(void)
{
	// caso o clock seja 16 MHz, divisor de 2 para todo o Atmega
	CLKPR=0x80;
  d6:	e1 e6       	ldi	r30, 0x61	; 97
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
	CLKPR=0x01;
  de:	c1 e0       	ldi	r28, 0x01	; 1
  e0:	c0 83       	st	Z, r28
#define MOC_SIGNAL_DURATION_US	50

inline void gpio_setup(void)
{
	// Configurar pinos dos MOCs como saídas
	DDR_MOC1 |= (1 << PIN_MOC1);
  e2:	52 9a       	sbi	0x0a, 2	; 10
	DDR_MOC2 |= (1 << PIN_MOC2);
  e4:	50 9a       	sbi	0x0a, 0	; 10
	DDR_MOC3 |= (1 << PIN_MOC3);
  e6:	3b 9a       	sbi	0x07, 3	; 7
	DDR_MOC4 |= (1 << PIN_MOC4);
  e8:	53 9a       	sbi	0x0a, 3	; 10
	DDR_MOC5 |= (1 << PIN_MOC5);
  ea:	51 9a       	sbi	0x0a, 1	; 10
	DDR_MOC6 |= (1 << PIN_MOC6);
  ec:	3c 9a       	sbi	0x07, 4	; 7
	
	DDRB = 0x00;
  ee:	14 b8       	out	0x04, r1	; 4

int main(void)
{
	clock_setup(); 
	gpio_setup();
	adc_setup();
  f0:	0e 94 48 00 	call	0x90	; 0x90 <adc_setup>
	timer0_setup();
  f4:	0e 94 13 02 	call	0x426	; 0x426 <timer0_setup>
	timer1_setup();
  f8:	0e 94 23 02 	call	0x446	; 0x446 <timer1_setup>
	timer2_setup();
  fc:	0e 94 38 02 	call	0x470	; 0x470 <timer2_setup>
	sei(); // inicializa interrupções
 100:	78 94       	sei
	
	
	// Definição das globais
	pot_adc = 0;
 102:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <pot_adc+0x1>
 106:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <pot_adc>
	
	current_opto1 = 0;
 10a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <current_opto1>
	current_opto2 = 0;
 10e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <current_opto2>
	current_opto3 = 0;
 112:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <current_opto3>
	
	last_opto1 = 0;
 116:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <last_opto1>
	last_opto2 = 0;
 11a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <last_opto2>
	last_opto3 = 0;
 11e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <last_opto3>
	
	timer0_flag = 1;
 122:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <timer0_flag>
	timer1_flag = 1;
 126:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
	timer2_flag = 1;
 12a:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <timer2_flag>

	phase_sequence = CLOCKWISE;
 12e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <phase_sequence>
	
    while (1) 
    {		
		// Lê os valores dos pinos e inverte, dado que o sinal é 0 para ciclo positivo e 1 para ciclo negativo
		current_opto1 = !(PINB & (1 << 3));
 132:	ff 24       	eor	r15, r15
 134:	f3 94       	inc	r15
		// OPTO 2 POSITIVO
		if ( (current_opto2 == 1) && (last_opto2 == 0) && (timer1_flag) )
		{
			last_opto2 = current_opto2;
			pot_adc = adc_read(ADC_PIN);
			OCR1A = MAGIC_OPTO2_POS + pot_adc/6;
 136:	08 e8       	ldi	r16, 0x88	; 136
 138:	10 e0       	ldi	r17, 0x00	; 0
		// OPTO 3 POSITIVO
		if ( (current_opto3 == 1) && (last_opto3 == 0) && (timer2_flag) )
		{
			last_opto3 = current_opto3;
			pot_adc = adc_read(ADC_PIN);
			OCR2A = MAGIC_OPTO3_POS + pot_adc/6;
 13a:	c3 eb       	ldi	r28, 0xB3	; 179
 13c:	d0 e0       	ldi	r29, 0x00	; 0
	phase_sequence = CLOCKWISE;
	
    while (1) 
    {		
		// Lê os valores dos pinos e inverte, dado que o sinal é 0 para ciclo positivo e 1 para ciclo negativo
		current_opto1 = !(PINB & (1 << 3));
 13e:	ef 2c       	mov	r14, r15
 140:	83 b1       	in	r24, 0x03	; 3
 142:	83 fb       	bst	r24, 3
 144:	88 27       	eor	r24, r24
 146:	80 f9       	bld	r24, 0
 148:	8f 25       	eor	r24, r15
 14a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_opto1>
		current_opto2 = !(PINB & (1 << 2));
 14e:	83 b1       	in	r24, 0x03	; 3
 150:	82 fb       	bst	r24, 2
 152:	88 27       	eor	r24, r24
 154:	80 f9       	bld	r24, 0
 156:	8f 25       	eor	r24, r15
 158:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <current_opto2>
		current_opto3 = !(PINB & (1 << 1));
 15c:	83 b1       	in	r24, 0x03	; 3
 15e:	86 95       	lsr	r24
 160:	81 70       	andi	r24, 0x01	; 1
 162:	8f 25       	eor	r24, r15
 164:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <current_opto3>
		
		// if para detecção de borda da entrada, com flag de timer para garantia contra ruído
		if ( (current_opto1 == 1) && (last_opto1 == 0) && (timer0_flag))
 168:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_opto1>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	71 f5       	brne	.+92     	; 0x1cc <main+0xf6>
 170:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <last_opto1>
 174:	81 11       	cpse	r24, r1
 176:	2a c0       	rjmp	.+84     	; 0x1cc <main+0xf6>
 178:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timer0_flag>
 17c:	88 23       	and	r24, r24
 17e:	31 f1       	breq	.+76     	; 0x1cc <main+0xf6>
		{
			// Atualiza valor anterior do opto
			last_opto1 = current_opto1;
 180:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_opto1>
 184:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <last_opto1>
				
			// A verificação da sequência de fase somente é realizada na borda de subida do opto 1.
			// Na sequência de fase normal, opto2 deve ser 1 e opto 3 deve ser 0.
			// se opto2 estiver zero a sequência é invertida
			phase_sequence = (current_opto2 == 0) ? COUNTER_CLOCKWISE : CLOCKWISE;
 188:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current_opto2>
 18c:	8e 2d       	mov	r24, r14
 18e:	91 11       	cpse	r25, r1
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <phase_sequence>
			
			// Aquisição do valor do ADC
			pot_adc = adc_read(ADC_PIN);
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 56 00 	call	0xac	; 0xac <adc_read>
 19c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pot_adc+0x1>
 1a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pot_adc>
				
			// Setar compare do timer.
			// A constante MAGIC é dependente do delay do opto em relação à fase e deve ser manualmente ajustada (timer.h)
			// A divisão por 6 é uma aproximação para evitar uso de floats.
			OCR0A = MAGIC_OPTO1_POS + pot_adc/6;
 1a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pot_adc>
 1a8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pot_adc+0x1>
 1ac:	ab ea       	ldi	r26, 0xAB	; 171
 1ae:	ba ea       	ldi	r27, 0xAA	; 170
 1b0:	0e 94 07 03 	call	0x60e	; 0x60e <__umulhisi3>
 1b4:	96 95       	lsr	r25
 1b6:	87 95       	ror	r24
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	85 5d       	subi	r24, 0xD5	; 213
 1be:	87 bd       	out	0x27, r24	; 39
			
			// Inicia timer
			timer0_reset();
 1c0:	0e 94 21 02 	call	0x442	; 0x442 <timer0_reset>
			timer0_flag = 0; // Com a flag em zero não é possível modificar o timer até a interrupção.
 1c4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timer0_flag>
			timer0_start();
 1c8:	0e 94 19 02 	call	0x432	; 0x432 <timer0_start>
		}

		// OPTO 1 NEGATIVO
		if ( (current_opto1 == 0) && (last_opto1 == 1) && (timer0_flag) )
 1cc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_opto1>
 1d0:	81 11       	cpse	r24, r1
 1d2:	27 c0       	rjmp	.+78     	; 0x222 <main+0x14c>
 1d4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <last_opto1>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	19 f5       	brne	.+70     	; 0x222 <main+0x14c>
 1dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timer0_flag>
 1e0:	88 23       	and	r24, r24
 1e2:	f9 f0       	breq	.+62     	; 0x222 <main+0x14c>
		{
			last_opto1 = current_opto1;
 1e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_opto1>
 1e8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <last_opto1>
			pot_adc = adc_read(ADC_PIN);
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 56 00 	call	0xac	; 0xac <adc_read>
 1f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pot_adc+0x1>
 1f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pot_adc>
			OCR0A = MAGIC_OPTO1_NEG + pot_adc/6;
 1fa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pot_adc>
 1fe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pot_adc+0x1>
 202:	ab ea       	ldi	r26, 0xAB	; 171
 204:	ba ea       	ldi	r27, 0xAA	; 170
 206:	0e 94 07 03 	call	0x60e	; 0x60e <__umulhisi3>
 20a:	96 95       	lsr	r25
 20c:	87 95       	ror	r24
 20e:	96 95       	lsr	r25
 210:	87 95       	ror	r24
 212:	85 5d       	subi	r24, 0xD5	; 213
 214:	87 bd       	out	0x27, r24	; 39
			timer0_reset();
 216:	0e 94 21 02 	call	0x442	; 0x442 <timer0_reset>
			timer0_flag = 0;
 21a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timer0_flag>
			timer0_start();
 21e:	0e 94 19 02 	call	0x432	; 0x432 <timer0_start>
		}
		
		// OPTO 2 POSITIVO
		if ( (current_opto2 == 1) && (last_opto2 == 0) && (timer1_flag) )
 222:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <current_opto2>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	49 f5       	brne	.+82     	; 0x27c <main+0x1a6>
 22a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <last_opto2>
 22e:	81 11       	cpse	r24, r1
 230:	25 c0       	rjmp	.+74     	; 0x27c <main+0x1a6>
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 236:	88 23       	and	r24, r24
 238:	09 f1       	breq	.+66     	; 0x27c <main+0x1a6>
		{
			last_opto2 = current_opto2;
 23a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <current_opto2>
 23e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <last_opto2>
			pot_adc = adc_read(ADC_PIN);
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	0e 94 56 00 	call	0xac	; 0xac <adc_read>
 248:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pot_adc+0x1>
 24c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pot_adc>
			OCR1A = MAGIC_OPTO2_POS + pot_adc/6;
 250:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pot_adc>
 254:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pot_adc+0x1>
 258:	ab ea       	ldi	r26, 0xAB	; 171
 25a:	ba ea       	ldi	r27, 0xAA	; 170
 25c:	0e 94 07 03 	call	0x60e	; 0x60e <__umulhisi3>
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	8b 96       	adiw	r24, 0x2b	; 43
 26a:	f8 01       	movw	r30, r16
 26c:	91 83       	std	Z+1, r25	; 0x01
 26e:	80 83       	st	Z, r24
			timer1_reset();
 270:	0e 94 33 02 	call	0x466	; 0x466 <timer1_reset>
			timer1_flag = 0;
 274:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			timer1_start();
 278:	0e 94 29 02 	call	0x452	; 0x452 <timer1_start>
		}
		
		// OPTO 2 NEGATIVO
		if ( (current_opto2 == 0) && (last_opto2 == 1) && (timer1_flag) )
 27c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <current_opto2>
 280:	81 11       	cpse	r24, r1
 282:	29 c0       	rjmp	.+82     	; 0x2d6 <main+0x200>
 284:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <last_opto2>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	29 f5       	brne	.+74     	; 0x2d6 <main+0x200>
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 290:	88 23       	and	r24, r24
 292:	09 f1       	breq	.+66     	; 0x2d6 <main+0x200>
		{
			last_opto2 = current_opto2;
 294:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <current_opto2>
 298:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <last_opto2>
			pot_adc = adc_read(ADC_PIN);
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 56 00 	call	0xac	; 0xac <adc_read>
 2a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pot_adc+0x1>
 2a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pot_adc>
			OCR1A = MAGIC_OPTO2_NEG + pot_adc/6;
 2aa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pot_adc>
 2ae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pot_adc+0x1>
 2b2:	ab ea       	ldi	r26, 0xAB	; 171
 2b4:	ba ea       	ldi	r27, 0xAA	; 170
 2b6:	0e 94 07 03 	call	0x60e	; 0x60e <__umulhisi3>
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	8b 96       	adiw	r24, 0x2b	; 43
 2c4:	f8 01       	movw	r30, r16
 2c6:	91 83       	std	Z+1, r25	; 0x01
 2c8:	80 83       	st	Z, r24
			timer1_reset();
 2ca:	0e 94 33 02 	call	0x466	; 0x466 <timer1_reset>
			timer1_flag = 0;
 2ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			timer1_start();
 2d2:	0e 94 29 02 	call	0x452	; 0x452 <timer1_start>
		}
		
		// OPTO 3 POSITIVO
		if ( (current_opto3 == 1) && (last_opto3 == 0) && (timer2_flag) )
 2d6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <current_opto3>
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	39 f5       	brne	.+78     	; 0x32c <main+0x256>
 2de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <last_opto3>
 2e2:	81 11       	cpse	r24, r1
 2e4:	23 c0       	rjmp	.+70     	; 0x32c <main+0x256>
 2e6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer2_flag>
 2ea:	88 23       	and	r24, r24
 2ec:	f9 f0       	breq	.+62     	; 0x32c <main+0x256>
		{
			last_opto3 = current_opto3;
 2ee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <current_opto3>
 2f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_opto3>
			pot_adc = adc_read(ADC_PIN);
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	0e 94 56 00 	call	0xac	; 0xac <adc_read>
 2fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pot_adc+0x1>
 300:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pot_adc>
			OCR2A = MAGIC_OPTO3_POS + pot_adc/6;
 304:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pot_adc>
 308:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pot_adc+0x1>
 30c:	ab ea       	ldi	r26, 0xAB	; 171
 30e:	ba ea       	ldi	r27, 0xAA	; 170
 310:	0e 94 07 03 	call	0x60e	; 0x60e <__umulhisi3>
 314:	96 95       	lsr	r25
 316:	87 95       	ror	r24
 318:	96 95       	lsr	r25
 31a:	87 95       	ror	r24
 31c:	85 5d       	subi	r24, 0xD5	; 213
 31e:	88 83       	st	Y, r24
			timer2_reset();
 320:	0e 94 4a 02 	call	0x494	; 0x494 <timer2_reset>
			timer2_flag = 0;
 324:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timer2_flag>
			timer2_start();
 328:	0e 94 3e 02 	call	0x47c	; 0x47c <timer2_start>
		}
		
		// OPTO 3 NEGATIVO
		if ( (current_opto3 == 0) && (last_opto3 == 1) && (timer2_flag) )
 32c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <current_opto3>
 330:	81 11       	cpse	r24, r1
 332:	27 c0       	rjmp	.+78     	; 0x382 <main+0x2ac>
 334:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <last_opto3>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	19 f5       	brne	.+70     	; 0x382 <main+0x2ac>
 33c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer2_flag>
 340:	88 23       	and	r24, r24
 342:	f9 f0       	breq	.+62     	; 0x382 <main+0x2ac>
		{
			last_opto3 = current_opto3;
 344:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <current_opto3>
 348:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_opto3>
			pot_adc = adc_read(ADC_PIN);
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 56 00 	call	0xac	; 0xac <adc_read>
 352:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pot_adc+0x1>
 356:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pot_adc>
			OCR2A = MAGIC_OPTO3_NEG + pot_adc/6;
 35a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pot_adc>
 35e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pot_adc+0x1>
 362:	ab ea       	ldi	r26, 0xAB	; 171
 364:	ba ea       	ldi	r27, 0xAA	; 170
 366:	0e 94 07 03 	call	0x60e	; 0x60e <__umulhisi3>
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	85 5d       	subi	r24, 0xD5	; 213
 374:	88 83       	st	Y, r24
			timer2_reset();
 376:	0e 94 4a 02 	call	0x494	; 0x494 <timer2_reset>
			timer2_flag = 0;
 37a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timer2_flag>
			timer2_start();
 37e:	0e 94 3e 02 	call	0x47c	; 0x47c <timer2_start>
		}
		
		
		// Switch de gatilhamento, o valor de scr_trigger é alterado nas ISR
		switch (scr_trigger)
 382:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <scr_trigger>
 386:	83 30       	cpi	r24, 0x03	; 3
 388:	11 f1       	breq	.+68     	; 0x3ce <main+0x2f8>
 38a:	28 f4       	brcc	.+10     	; 0x396 <main+0x2c0>
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	49 f0       	breq	.+18     	; 0x3a2 <main+0x2cc>
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	91 f0       	breq	.+36     	; 0x3b8 <main+0x2e2>
 394:	d5 ce       	rjmp	.-598    	; 0x140 <main+0x6a>
 396:	85 30       	cpi	r24, 0x05	; 5
 398:	81 f1       	breq	.+96     	; 0x3fa <main+0x324>
 39a:	20 f1       	brcs	.+72     	; 0x3e4 <main+0x30e>
 39c:	86 30       	cpi	r24, 0x06	; 6
 39e:	c1 f1       	breq	.+112    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3a0:	cf ce       	rjmp	.-610    	; 0x140 <main+0x6a>
		{
			case TRIGGER_15:
			PORT_MOC1 |= (1 << PIN_MOC1); // setar pino moc
 3a2:	5a 9a       	sbi	0x0b, 2	; 11
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 3a4:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a6:	f5 e8       	ldi	r31, 0x85	; 133
 3a8:	fa 95       	dec	r31
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0x2d2>
 3ac:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC1 &= ~(1 << PIN_MOC1); // des setar pino
 3ae:	5a 98       	cbi	0x0b, 2	; 11
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 3b0:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 3b2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <scr_trigger>
			break;
 3b6:	c4 ce       	rjmp	.-632    	; 0x140 <main+0x6a>
			
			case TRIGGER_16:
			PORT_MOC1 |= (1 << PIN_MOC1); // setar pino moc
 3b8:	5a 9a       	sbi	0x0b, 2	; 11
			PORT_MOC6 |= (1 << PIN_MOC6); // setar pino moc
 3ba:	44 9a       	sbi	0x08, 4	; 8
 3bc:	85 e8       	ldi	r24, 0x85	; 133
 3be:	8a 95       	dec	r24
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0x2e8>
 3c2:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC1 &= ~(1 << PIN_MOC1); // des setar pino
 3c4:	5a 98       	cbi	0x0b, 2	; 11
			PORT_MOC6 &= ~(1 << PIN_MOC6); // des setar pino
 3c6:	44 98       	cbi	0x08, 4	; 8
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 3c8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <scr_trigger>
			break;
 3cc:	b9 ce       	rjmp	.-654    	; 0x140 <main+0x6a>
			
			case TRIGGER_26:
			PORT_MOC2 |= (1 << PIN_MOC2); // setar pino moc
 3ce:	58 9a       	sbi	0x0b, 0	; 11
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 3d0:	59 9a       	sbi	0x0b, 1	; 11
 3d2:	e5 e8       	ldi	r30, 0x85	; 133
 3d4:	ea 95       	dec	r30
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0x2fe>
 3d8:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC2 &= ~(1 << PIN_MOC2); // des setar pino
 3da:	58 98       	cbi	0x0b, 0	; 11
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 3dc:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 3de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <scr_trigger>
			break;
 3e2:	ae ce       	rjmp	.-676    	; 0x140 <main+0x6a>
			
			case TRIGGER_24:
			PORT_MOC2 |= (1 << PIN_MOC2); // setar pino moc
 3e4:	58 9a       	sbi	0x0b, 0	; 11
			PORT_MOC4 |= (1 << PIN_MOC4); // setar pino moc
 3e6:	5b 9a       	sbi	0x0b, 3	; 11
 3e8:	f5 e8       	ldi	r31, 0x85	; 133
 3ea:	fa 95       	dec	r31
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0x314>
 3ee:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC2 &= ~(1 << PIN_MOC2); // des setar pino
 3f0:	58 98       	cbi	0x0b, 0	; 11
			PORT_MOC4 &= ~(1 << PIN_MOC4); // des setar pino
 3f2:	5b 98       	cbi	0x0b, 3	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 3f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <scr_trigger>
			break;
 3f8:	a3 ce       	rjmp	.-698    	; 0x140 <main+0x6a>
			
			case TRIGGER_34:
			PORT_MOC3 |= (1 << PIN_MOC3); // setar pino moc
 3fa:	43 9a       	sbi	0x08, 3	; 8
			PORT_MOC4 |= (1 << PIN_MOC4); // setar pino moc
 3fc:	5b 9a       	sbi	0x0b, 3	; 11
 3fe:	85 e8       	ldi	r24, 0x85	; 133
 400:	8a 95       	dec	r24
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
 404:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC3 &= ~(1 << PIN_MOC3); // des setar pino
 406:	43 98       	cbi	0x08, 3	; 8
			PORT_MOC4 &= ~(1 << PIN_MOC4); // des setar pino
 408:	5b 98       	cbi	0x0b, 3	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 40a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <scr_trigger>
			break;
 40e:	98 ce       	rjmp	.-720    	; 0x140 <main+0x6a>
			
			case TRIGGER_35:
			PORT_MOC3 |= (1 << PIN_MOC3); // setar pino moc
 410:	43 9a       	sbi	0x08, 3	; 8
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 412:	59 9a       	sbi	0x0b, 1	; 11
 414:	e5 e8       	ldi	r30, 0x85	; 133
 416:	ea 95       	dec	r30
 418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC3 &= ~(1 << PIN_MOC3); // des setar pino
 41c:	43 98       	cbi	0x08, 3	; 8
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 41e:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 420:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <scr_trigger>
			break;
 424:	8d ce       	rjmp	.-742    	; 0x140 <main+0x6a>

00000426 <timer0_setup>:


/* Funções Timer 0 */
void timer0_setup(void)
{
	TIMSK0 |= (1 << OCIE0A); // ativar interrupt do output compare 0A
 426:	ee e6       	ldi	r30, 0x6E	; 110
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	82 60       	ori	r24, 0x02	; 2
 42e:	80 83       	st	Z, r24
 430:	08 95       	ret

00000432 <timer0_start>:
}
void timer0_start(void)
{
	TCCR0B |= (1 << CS02); // ativar timer com prescaler 256
 432:	85 b5       	in	r24, 0x25	; 37
 434:	84 60       	ori	r24, 0x04	; 4
 436:	85 bd       	out	0x25, r24	; 37
 438:	08 95       	ret

0000043a <timer0_stop>:
}
void timer0_stop(void)
{
	TCCR0B &= ~(1 << CS02); // desativar timer
 43a:	85 b5       	in	r24, 0x25	; 37
 43c:	8b 7f       	andi	r24, 0xFB	; 251
 43e:	85 bd       	out	0x25, r24	; 37
 440:	08 95       	ret

00000442 <timer0_reset>:
}
void timer0_reset(void)
{
	TCNT0 = 0;
 442:	16 bc       	out	0x26, r1	; 38
 444:	08 95       	ret

00000446 <timer1_setup>:
}

/* Funções Timer 1 */
void timer1_setup(void)
{
	TIMSK1 |= (1 << OCIE1A);
 446:	ef e6       	ldi	r30, 0x6F	; 111
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	80 83       	st	Z, r24
 450:	08 95       	ret

00000452 <timer1_start>:
}
void timer1_start(void)
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
 452:	e1 e8       	ldi	r30, 0x81	; 129
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	84 60       	ori	r24, 0x04	; 4
 45a:	80 83       	st	Z, r24
 45c:	08 95       	ret

0000045e <timer1_stop>:
}
void timer1_stop(void)
{
	TCCR0B &= ~(1 << CS12); // desativar timer
 45e:	85 b5       	in	r24, 0x25	; 37
 460:	8b 7f       	andi	r24, 0xFB	; 251
 462:	85 bd       	out	0x25, r24	; 37
 464:	08 95       	ret

00000466 <timer1_reset>:
}
void timer1_reset(void)
{
	TCNT1H = 0;
 466:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
 46a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 46e:	08 95       	ret

00000470 <timer2_setup>:
}

/* Funções Timer 2 */
void timer2_setup(void)
{
	TIMSK2 |= (1 << OCIE2A);
 470:	e0 e7       	ldi	r30, 0x70	; 112
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	82 60       	ori	r24, 0x02	; 2
 478:	80 83       	st	Z, r24
 47a:	08 95       	ret

0000047c <timer2_start>:
}
void timer2_start(void)
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
 47c:	e1 eb       	ldi	r30, 0xB1	; 177
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	86 60       	ori	r24, 0x06	; 6
 484:	80 83       	st	Z, r24
 486:	08 95       	ret

00000488 <timer2_stop>:
}
void timer2_stop(void)
{
	TCCR2B &= ~(1 << CS22) | (1 << CS21);
 488:	e1 eb       	ldi	r30, 0xB1	; 177
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	8b 7f       	andi	r24, 0xFB	; 251
 490:	80 83       	st	Z, r24
 492:	08 95       	ret

00000494 <timer2_reset>:
}
void timer2_reset(void)
{
	TCNT2 = 0;
 494:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 498:	08 95       	ret

0000049a <__vector_14>:
}


/* Interrupções dos comparadores dos timers */
ISR(TIMER0_COMPA_vect)
{
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
	timer0_flag = 1; // Reativa flag para possibilitar alterações do timer para o próximo semiciclo
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timer0_flag>
	timer0_stop();
 4c2:	0e 94 1d 02 	call	0x43a	; 0x43a <timer0_stop>
	
	if (last_opto1) // semiciclo positivo
 4c6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <last_opto1>
 4ca:	88 23       	and	r24, r24
 4cc:	51 f0       	breq	.+20     	; 0x4e2 <__vector_14+0x48>
	{
		scr_trigger = (phase_sequence == COUNTER_CLOCKWISE) ? TRIGGER_16 : TRIGGER_15;
 4ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence>
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	11 f0       	breq	.+4      	; 0x4da <__vector_14+0x40>
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <__vector_14+0x42>
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <scr_trigger>
 4e0:	09 c0       	rjmp	.+18     	; 0x4f4 <__vector_14+0x5a>
		
	}
	else			// semiciclo negativo
	{
		scr_trigger = (phase_sequence == COUNTER_CLOCKWISE) ? TRIGGER_34 : TRIGGER_24;
 4e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence>
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	11 f0       	breq	.+4      	; 0x4ee <__vector_14+0x54>
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <__vector_14+0x56>
 4ee:	85 e0       	ldi	r24, 0x05	; 5
 4f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <scr_trigger>
	}
	
}
 4f4:	ff 91       	pop	r31
 4f6:	ef 91       	pop	r30
 4f8:	bf 91       	pop	r27
 4fa:	af 91       	pop	r26
 4fc:	9f 91       	pop	r25
 4fe:	8f 91       	pop	r24
 500:	7f 91       	pop	r23
 502:	6f 91       	pop	r22
 504:	5f 91       	pop	r21
 506:	4f 91       	pop	r20
 508:	3f 91       	pop	r19
 50a:	2f 91       	pop	r18
 50c:	0f 90       	pop	r0
 50e:	0f be       	out	0x3f, r0	; 63
 510:	0f 90       	pop	r0
 512:	1f 90       	pop	r1
 514:	18 95       	reti

00000516 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
 520:	2f 93       	push	r18
 522:	3f 93       	push	r19
 524:	4f 93       	push	r20
 526:	5f 93       	push	r21
 528:	6f 93       	push	r22
 52a:	7f 93       	push	r23
 52c:	8f 93       	push	r24
 52e:	9f 93       	push	r25
 530:	af 93       	push	r26
 532:	bf 93       	push	r27
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
	timer1_flag = 1; 
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	timer1_stop();
 53e:	0e 94 2f 02 	call	0x45e	; 0x45e <timer1_stop>
	
	if (last_opto2) // semiciclo positivo
 542:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <last_opto2>
 546:	88 23       	and	r24, r24
 548:	51 f0       	breq	.+20     	; 0x55e <__vector_11+0x48>
	{
		scr_trigger = (phase_sequence == COUNTER_CLOCKWISE) ? TRIGGER_24 : TRIGGER_26;
 54a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence>
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	11 f0       	breq	.+4      	; 0x556 <__vector_11+0x40>
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	01 c0       	rjmp	.+2      	; 0x558 <__vector_11+0x42>
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <scr_trigger>
 55c:	09 c0       	rjmp	.+18     	; 0x570 <__vector_11+0x5a>
		
	}
	else			// semiciclo negativo
	{
		scr_trigger = (phase_sequence == COUNTER_CLOCKWISE) ? TRIGGER_15 : TRIGGER_35;
 55e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence>
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	11 f0       	breq	.+4      	; 0x56a <__vector_11+0x54>
 566:	86 e0       	ldi	r24, 0x06	; 6
 568:	01 c0       	rjmp	.+2      	; 0x56c <__vector_11+0x56>
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <scr_trigger>
	}
	
}
 570:	ff 91       	pop	r31
 572:	ef 91       	pop	r30
 574:	bf 91       	pop	r27
 576:	af 91       	pop	r26
 578:	9f 91       	pop	r25
 57a:	8f 91       	pop	r24
 57c:	7f 91       	pop	r23
 57e:	6f 91       	pop	r22
 580:	5f 91       	pop	r21
 582:	4f 91       	pop	r20
 584:	3f 91       	pop	r19
 586:	2f 91       	pop	r18
 588:	0f 90       	pop	r0
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	0f 90       	pop	r0
 58e:	1f 90       	pop	r1
 590:	18 95       	reti

00000592 <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	2f 93       	push	r18
 59e:	3f 93       	push	r19
 5a0:	4f 93       	push	r20
 5a2:	5f 93       	push	r21
 5a4:	6f 93       	push	r22
 5a6:	7f 93       	push	r23
 5a8:	8f 93       	push	r24
 5aa:	9f 93       	push	r25
 5ac:	af 93       	push	r26
 5ae:	bf 93       	push	r27
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31
	timer2_flag = 1; 
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer2_flag>
	timer2_stop();
 5ba:	0e 94 44 02 	call	0x488	; 0x488 <timer2_stop>
	
	if (last_opto3) // semiciclo positivo
 5be:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <last_opto3>
 5c2:	88 23       	and	r24, r24
 5c4:	51 f0       	breq	.+20     	; 0x5da <__vector_7+0x48>
	{
		scr_trigger = (phase_sequence == COUNTER_CLOCKWISE) ? TRIGGER_35 : TRIGGER_34;
 5c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence>
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	11 f0       	breq	.+4      	; 0x5d2 <__vector_7+0x40>
 5ce:	85 e0       	ldi	r24, 0x05	; 5
 5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <__vector_7+0x42>
 5d2:	86 e0       	ldi	r24, 0x06	; 6
 5d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <scr_trigger>
 5d8:	09 c0       	rjmp	.+18     	; 0x5ec <__vector_7+0x5a>
		
	}
	else			// semiciclo negativo
	{
		scr_trigger = (phase_sequence == COUNTER_CLOCKWISE) ? TRIGGER_26 : TRIGGER_16;
 5da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence>
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	11 f0       	breq	.+4      	; 0x5e6 <__vector_7+0x54>
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <__vector_7+0x56>
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <scr_trigger>
	}
	
}
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <__umulhisi3>:
 60e:	a2 9f       	mul	r26, r18
 610:	b0 01       	movw	r22, r0
 612:	b3 9f       	mul	r27, r19
 614:	c0 01       	movw	r24, r0
 616:	a3 9f       	mul	r26, r19
 618:	70 0d       	add	r23, r0
 61a:	81 1d       	adc	r24, r1
 61c:	11 24       	eor	r1, r1
 61e:	91 1d       	adc	r25, r1
 620:	b2 9f       	mul	r27, r18
 622:	70 0d       	add	r23, r0
 624:	81 1d       	adc	r24, r1
 626:	11 24       	eor	r1, r1
 628:	91 1d       	adc	r25, r1
 62a:	08 95       	ret

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
