
tyn625_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000510  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000584  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c99  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000794  00000000  00000000  000012dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000746  00000000  00000000  00001a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000021b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b0  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000316  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 86 02 	jmp	0x50c	; 0x50c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


static inline void adc_setup(void)
{
	/* Seleção de modo de tensão de referência. */
	ADMUX |= (1 << REFS0); // Utiliza Avcc como referência
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	
	/* Seleção das portas ligadas ao mux */
	ADMUX |= (1 << MUX1); // ADC2
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
	
	/* Setup do prescaler, deve estar entre 50 KHz e 200 KHz */
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // Para 8 MHz, um divisor de 64 gera 125 KHz
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	86 60       	ori	r24, 0x06	; 6
  a8:	80 83       	st	Z, r24
	
	/* Seleciona modo de funcionamento do ADC. */
	ADCSRA |= (1 << ADATE); // Ativa auto trigger do ADC
  aa:	80 81       	ld	r24, Z
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	80 83       	st	Z, r24
	// ADCSRB &= ~(1 << ADTS2) & ~(1 << ADTS1) & ~(1 << ADTS0) & // Modo Free Running
	
	/* Ativa o ADC */
	ADCSRA |= (1 << ADEN);
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24

	/* Inicia a primeira conversão em modo Free Running */
	ADCSRA |= (1 << ADSC);
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
#define MOC_SIGNAL_DURATION_US	50

static inline void gpio_setup(void)
{
	// Configurar pinos dos MOCs como saídas
	DDR_MOC1 |= (1 << PIN_MOC1);
  bc:	52 9a       	sbi	0x0a, 2	; 10
	DDR_MOC2 |= (1 << PIN_MOC2);
  be:	50 9a       	sbi	0x0a, 0	; 10
	DDR_MOC3 |= (1 << PIN_MOC3);
  c0:	3b 9a       	sbi	0x07, 3	; 7
	DDR_MOC4 |= (1 << PIN_MOC4);
  c2:	53 9a       	sbi	0x0a, 3	; 10
	DDR_MOC5 |= (1 << PIN_MOC5);
  c4:	51 9a       	sbi	0x0a, 1	; 10
	DDR_MOC6 |= (1 << PIN_MOC6);
  c6:	3c 9a       	sbi	0x07, 4	; 7
/* Funções relacionadas ao uso dos timers */

/* Funções Timer 0 */
static inline void timer0_setup(void)
{
	TIMSK0 |= (1 << OCIE0A); // ativar interrupt do output compare 0A
  c8:	ee e6       	ldi	r30, 0x6E	; 110
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
}

/* Funções Timer 1 */
static inline void timer1_setup(void)
{
	TIMSK1 |= (1 << OCIE1A);
  d2:	ef e6       	ldi	r30, 0x6F	; 111
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
}

/* Funções Timer 2 */
static inline void timer2_setup(void)
{
	TIMSK2 |= (1 << OCIE2A);
  dc:	e0 e7       	ldi	r30, 0x70	; 112
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	timer1_setup();
	timer2_setup();

	uint16_t pot_adc = 0;
	
	sei(); // inicializa interrupções
  e6:	78 94       	sei
		{
			case 1:
				if (last_state_opto1 != 1)
				{
					last_state_opto1 = 1; // muda estado utilizado para testar alterações
					pot_adc = (ADCH << 8) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
  e8:	c9 e7       	ldi	r28, 0x79	; 121
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	e8 e7       	ldi	r30, 0x78	; 120
  ee:	f0 e0       	ldi	r31, 0x00	; 0
			case 0:
			if (last_state_opto2 != 0)
			{
				last_state_opto2 = 0; // muda estado utilizado para testar alterações
				pot_adc = (ADC_POT_H << 7) | (ADC_POT_L << 0); // obtém valor 10 bits do adc (necessita testar)
				OCR1AL = MAGIC_OPTO1_NEG + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
  f0:	0f 2e       	mov	r0, r31
  f2:	f8 e8       	ldi	r31, 0x88	; 136
  f4:	af 2e       	mov	r10, r31
  f6:	b1 2c       	mov	r11, r1
  f8:	f0 2d       	mov	r31, r0
{
	TCNT1L = value;
}
static inline void timer1_reset(void)
{
	TCNT1H = 0;
  fa:	0f 2e       	mov	r0, r31
  fc:	f5 e8       	ldi	r31, 0x85	; 133
  fe:	cf 2e       	mov	r12, r31
 100:	d1 2c       	mov	r13, r1
 102:	f0 2d       	mov	r31, r0
	TCNT1L = 0;
 104:	0f 2e       	mov	r0, r31
 106:	f4 e8       	ldi	r31, 0x84	; 132
 108:	ef 2e       	mov	r14, r31
 10a:	f1 2c       	mov	r15, r1
 10c:	f0 2d       	mov	r31, r0
{
	TIMSK1 |= (1 << OCIE1A);
}
static inline void timer1_start(void)
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
 10e:	41 e8       	ldi	r20, 0x81	; 129
 110:	50 e0       	ldi	r21, 0x00	; 0
			case 0:
			if (last_state_opto3 != 0)
			{
				last_state_opto3 = 0; // muda estado utilizado para testar alterações
				pot_adc = (ADCH << 8) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
				OCR2A = MAGIC_OPTO1_NEG + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 112:	0f 2e       	mov	r0, r31
 114:	f3 eb       	ldi	r31, 0xB3	; 179
 116:	8f 2e       	mov	r8, r31
 118:	91 2c       	mov	r9, r1
 11a:	f0 2d       	mov	r31, r0
{
	TCNT2 = value;
}
static inline void timer2_reset(void)
{
	TCNT2 = 0;
 11c:	0f 2e       	mov	r0, r31
 11e:	f2 eb       	ldi	r31, 0xB2	; 178
 120:	6f 2e       	mov	r6, r31
 122:	71 2c       	mov	r7, r1
 124:	f0 2d       	mov	r31, r0
{
	TIMSK2 |= (1 << OCIE2A);
}
static inline void timer2_start(void)
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
 126:	01 eb       	ldi	r16, 0xB1	; 177
 128:	10 e0       	ldi	r17, 0x00	; 0
		switch (1 & (PORT_OPTO1 >> PIN_OPTO1))
		{
			case 1:
				if (last_state_opto1 != 1)
				{
					last_state_opto1 = 1; // muda estado utilizado para testar alterações
 12a:	55 24       	eor	r5, r5
 12c:	53 94       	inc	r5
	
	sei(); // inicializa interrupções
	
    while (1) 
    {			
		switch (1 & (PORT_OPTO1 >> PIN_OPTO1))
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	83 fb       	bst	r24, 3
 132:	99 27       	eor	r25, r25
 134:	90 f9       	bld	r25, 0
 136:	83 ff       	sbrs	r24, 3
 138:	23 c0       	rjmp	.+70     	; 0x180 <main+0xf0>
 13a:	91 30       	cpi	r25, 0x01	; 1
 13c:	09 f0       	breq	.+2      	; 0x140 <main+0xb0>
 13e:	3f c0       	rjmp	.+126    	; 0x1be <main+0x12e>
		{
			case 1:
				if (last_state_opto1 != 1)
 140:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_state_opto1>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	d9 f1       	breq	.+118    	; 0x1be <main+0x12e>
				{
					last_state_opto1 = 1; // muda estado utilizado para testar alterações
 148:	50 92 02 01 	sts	0x0102, r5	; 0x800102 <last_state_opto1>
					pot_adc = (ADCH << 8) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
 14c:	88 81       	ld	r24, Y
 14e:	20 81       	ld	r18, Z
					OCR0A = MAGIC_OPTO1_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0 
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	38 2b       	or	r19, r24
 154:	ab ea       	ldi	r26, 0xAB	; 171
 156:	ba ea       	ldi	r27, 0xAA	; 170
 158:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	8e 5a       	subi	r24, 0xAE	; 174
 166:	87 bd       	out	0x27, r24	; 39
					if (!(PORT_OPTO2 & (1 << PIN_OPTO2))) // teste para sequência de fase
 168:	2a 99       	sbic	0x05, 2	; 5
 16a:	03 c0       	rjmp	.+6      	; 0x172 <main+0xe2>
					{
						// ordem de fase trocada
						phase_sequence_opto1 = COUNTER_CLOCKWISE;
 16c:	50 92 06 01 	sts	0x0106, r5	; 0x800106 <phase_sequence_opto1>
 170:	02 c0       	rjmp	.+4      	; 0x176 <main+0xe6>
					}
					else
					{
						//ordem de fase normal
						phase_sequence_opto1 = CLOCKWISE;
 172:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <phase_sequence_opto1>
{
	TCNT0 = value;
}
static inline void timer0_reset(void)
{
	TCNT0 = 0;
 176:	16 bc       	out	0x26, r1	; 38
{
	TIMSK0 |= (1 << OCIE0A); // ativar interrupt do output compare 0A
}
static inline void timer0_start(void)
{
	TCCR0B |= (1 << CS02); // ativar timer com prescaler 256
 178:	85 b5       	in	r24, 0x25	; 37
 17a:	84 60       	ori	r24, 0x04	; 4
 17c:	85 bd       	out	0x25, r24	; 37
 17e:	1f c0       	rjmp	.+62     	; 0x1be <main+0x12e>
					timer0_start();
				}
			break;
			
			case 0:
				if (last_state_opto1 != 0)
 180:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_state_opto1>
 184:	88 23       	and	r24, r24
 186:	d9 f0       	breq	.+54     	; 0x1be <main+0x12e>
				{
					last_state_opto1 = 0; // muda estado utilizado para testar alterações
 188:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <last_state_opto1>
					pot_adc = (ADCH << 8) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
 18c:	88 81       	ld	r24, Y
 18e:	20 81       	ld	r18, Z
					OCR0A = MAGIC_OPTO1_NEG + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	38 2b       	or	r19, r24
 194:	ab ea       	ldi	r26, 0xAB	; 171
 196:	ba ea       	ldi	r27, 0xAA	; 170
 198:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	8e 5a       	subi	r24, 0xAE	; 174
 1a6:	87 bd       	out	0x27, r24	; 39
					if (!(PORT_OPTO3 & (1 << PIN_OPTO3)))
 1a8:	29 99       	sbic	0x05, 1	; 5
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <main+0x122>
					{
						// ordem de fase trocada
						phase_sequence_opto1 = COUNTER_CLOCKWISE;
 1ac:	50 92 06 01 	sts	0x0106, r5	; 0x800106 <phase_sequence_opto1>
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <main+0x126>
					}
					else
					{
						//ordem de fase normal
						phase_sequence_opto1 = CLOCKWISE;
 1b2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <phase_sequence_opto1>
{
	TCNT0 = value;
}
static inline void timer0_reset(void)
{
	TCNT0 = 0;
 1b6:	16 bc       	out	0x26, r1	; 38
{
	TIMSK0 |= (1 << OCIE0A); // ativar interrupt do output compare 0A
}
static inline void timer0_start(void)
{
	TCCR0B |= (1 << CS02); // ativar timer com prescaler 256
 1b8:	85 b5       	in	r24, 0x25	; 37
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	85 bd       	out	0x25, r24	; 37
			default:
			break;
		}
		
		
		switch (1 & (PORT_OPTO2 >> PIN_OPTO2))
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	82 fb       	bst	r24, 2
 1c2:	99 27       	eor	r25, r25
 1c4:	90 f9       	bld	r25, 0
 1c6:	82 ff       	sbrs	r24, 2
 1c8:	2c c0       	rjmp	.+88     	; 0x222 <main+0x192>
 1ca:	91 30       	cpi	r25, 0x01	; 1
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <main+0x140>
 1ce:	50 c0       	rjmp	.+160    	; 0x270 <main+0x1e0>
		{
			case 1:
			if (last_state_opto2 != 1)
 1d0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_state_opto2>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	09 f4       	brne	.+2      	; 0x1da <main+0x14a>
 1d8:	4b c0       	rjmp	.+150    	; 0x270 <main+0x1e0>
			{
				last_state_opto2 = 1; // muda estado utilizado para testar alterações
 1da:	50 92 05 01 	sts	0x0105, r5	; 0x800105 <last_state_opto2>
				pot_adc = (ADCH << 7) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
 1de:	28 81       	ld	r18, Y
 1e0:	80 81       	ld	r24, Z
				OCR1AL = MAGIC_OPTO1_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 1e2:	90 e8       	ldi	r25, 0x80	; 128
 1e4:	29 9f       	mul	r18, r25
 1e6:	90 01       	movw	r18, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	28 2b       	or	r18, r24
 1ec:	ab ea       	ldi	r26, 0xAB	; 171
 1ee:	ba ea       	ldi	r27, 0xAA	; 170
 1f0:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 1f4:	96 95       	lsr	r25
 1f6:	87 95       	ror	r24
 1f8:	96 95       	lsr	r25
 1fa:	87 95       	ror	r24
 1fc:	8e 5a       	subi	r24, 0xAE	; 174
 1fe:	d5 01       	movw	r26, r10
 200:	8c 93       	st	X, r24
				if (!(PORT_OPTO3 & (1 << PIN_OPTO3))) // teste para sequência de fase
 202:	29 99       	sbic	0x05, 1	; 5
 204:	03 c0       	rjmp	.+6      	; 0x20c <main+0x17c>
				{
					// ordem de fase trocada
					phase_sequence_opto2 = COUNTER_CLOCKWISE;
 206:	50 92 04 01 	sts	0x0104, r5	; 0x800104 <phase_sequence_opto2>
 20a:	02 c0       	rjmp	.+4      	; 0x210 <main+0x180>
				}
				else
				{
					//ordem de fase normal
					phase_sequence_opto2 = CLOCKWISE;
 20c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <phase_sequence_opto2>
{
	TCNT1L = value;
}
static inline void timer1_reset(void)
{
	TCNT1H = 0;
 210:	d6 01       	movw	r26, r12
 212:	1c 92       	st	X, r1
	TCNT1L = 0;
 214:	d7 01       	movw	r26, r14
 216:	1c 92       	st	X, r1
{
	TIMSK1 |= (1 << OCIE1A);
}
static inline void timer1_start(void)
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
 218:	da 01       	movw	r26, r20
 21a:	8c 91       	ld	r24, X
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	8c 93       	st	X, r24
 220:	27 c0       	rjmp	.+78     	; 0x270 <main+0x1e0>
				timer1_start();
			}
			break;
			
			case 0:
			if (last_state_opto2 != 0)
 222:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_state_opto2>
 226:	88 23       	and	r24, r24
 228:	19 f1       	breq	.+70     	; 0x270 <main+0x1e0>
			{
				last_state_opto2 = 0; // muda estado utilizado para testar alterações
 22a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <last_state_opto2>
				pot_adc = (ADC_POT_H << 7) | (ADC_POT_L << 0); // obtém valor 10 bits do adc (necessita testar)
 22e:	28 81       	ld	r18, Y
 230:	80 81       	ld	r24, Z
				OCR1AL = MAGIC_OPTO1_NEG + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 232:	b0 e8       	ldi	r27, 0x80	; 128
 234:	2b 9f       	mul	r18, r27
 236:	90 01       	movw	r18, r0
 238:	11 24       	eor	r1, r1
 23a:	28 2b       	or	r18, r24
 23c:	ab ea       	ldi	r26, 0xAB	; 171
 23e:	ba ea       	ldi	r27, 0xAA	; 170
 240:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	96 95       	lsr	r25
 24a:	87 95       	ror	r24
 24c:	8e 5a       	subi	r24, 0xAE	; 174
 24e:	d5 01       	movw	r26, r10
 250:	8c 93       	st	X, r24
				if (!(PORT_OPTO1 & (1 << PIN_OPTO1))) // teste para sequência de fase
 252:	2b 99       	sbic	0x05, 3	; 5
 254:	03 c0       	rjmp	.+6      	; 0x25c <main+0x1cc>
				{
					// ordem de fase trocada
					phase_sequence_opto2 = COUNTER_CLOCKWISE;
 256:	50 92 04 01 	sts	0x0104, r5	; 0x800104 <phase_sequence_opto2>
 25a:	02 c0       	rjmp	.+4      	; 0x260 <main+0x1d0>
				}
				else
				{
					//ordem de fase normal
					phase_sequence_opto2 = CLOCKWISE;
 25c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <phase_sequence_opto2>
{
	TCNT1L = value;
}
static inline void timer1_reset(void)
{
	TCNT1H = 0;
 260:	d6 01       	movw	r26, r12
 262:	1c 92       	st	X, r1
	TCNT1L = 0;
 264:	d7 01       	movw	r26, r14
 266:	1c 92       	st	X, r1
{
	TIMSK1 |= (1 << OCIE1A);
}
static inline void timer1_start(void)
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
 268:	da 01       	movw	r26, r20
 26a:	8c 91       	ld	r24, X
 26c:	84 60       	ori	r24, 0x04	; 4
 26e:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
		switch (1 & (PORT_OPTO3 >> PIN_OPTO3))
 270:	85 b1       	in	r24, 0x05	; 5
 272:	81 fb       	bst	r24, 1
 274:	99 27       	eor	r25, r25
 276:	90 f9       	bld	r25, 0
 278:	81 ff       	sbrs	r24, 1
 27a:	2a c0       	rjmp	.+84     	; 0x2d0 <main+0x240>
 27c:	91 30       	cpi	r25, 0x01	; 1
 27e:	09 f0       	breq	.+2      	; 0x282 <main+0x1f2>
 280:	49 c0       	rjmp	.+146    	; 0x314 <main+0x284>
		{
			case 1:
			if (last_state_opto3 != 1)
 282:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <last_state_opto3>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	09 f4       	brne	.+2      	; 0x28c <main+0x1fc>
 28a:	44 c0       	rjmp	.+136    	; 0x314 <main+0x284>
			{
				last_state_opto3 = 1; // muda estado utilizado para testar alterações
 28c:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <last_state_opto3>
				pot_adc = (ADCH << 7) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
 290:	28 81       	ld	r18, Y
 292:	80 81       	ld	r24, Z
				OCR2A = MAGIC_OPTO1_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 294:	b0 e8       	ldi	r27, 0x80	; 128
 296:	2b 9f       	mul	r18, r27
 298:	90 01       	movw	r18, r0
 29a:	11 24       	eor	r1, r1
 29c:	28 2b       	or	r18, r24
 29e:	ab ea       	ldi	r26, 0xAB	; 171
 2a0:	ba ea       	ldi	r27, 0xAA	; 170
 2a2:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 2a6:	96 95       	lsr	r25
 2a8:	87 95       	ror	r24
 2aa:	96 95       	lsr	r25
 2ac:	87 95       	ror	r24
 2ae:	8e 5a       	subi	r24, 0xAE	; 174
 2b0:	d4 01       	movw	r26, r8
 2b2:	8c 93       	st	X, r24
				if (!(PORT_OPTO1 & (1 << PIN_OPTO1))) // teste para sequência de fase
 2b4:	2b 99       	sbic	0x05, 3	; 5
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <main+0x22e>
				{
					// ordem de fase trocada
					phase_sequence_opto3 = COUNTER_CLOCKWISE;
 2b8:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <phase_sequence_opto3>
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <main+0x232>
				}
				else
				{
					//ordem de fase normal
					phase_sequence_opto3 = CLOCKWISE;
 2be:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <phase_sequence_opto3>
{
	TCNT2 = value;
}
static inline void timer2_reset(void)
{
	TCNT2 = 0;
 2c2:	d3 01       	movw	r26, r6
 2c4:	1c 92       	st	X, r1
{
	TIMSK2 |= (1 << OCIE2A);
}
static inline void timer2_start(void)
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
 2c6:	d8 01       	movw	r26, r16
 2c8:	8c 91       	ld	r24, X
 2ca:	86 60       	ori	r24, 0x06	; 6
 2cc:	8c 93       	st	X, r24
 2ce:	22 c0       	rjmp	.+68     	; 0x314 <main+0x284>
				timer2_start();
			}
			break;
			
			case 0:
			if (last_state_opto3 != 0)
 2d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <last_state_opto3>
 2d4:	88 23       	and	r24, r24
 2d6:	f1 f0       	breq	.+60     	; 0x314 <main+0x284>
			{
				last_state_opto3 = 0; // muda estado utilizado para testar alterações
 2d8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <last_state_opto3>
				pot_adc = (ADCH << 8) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
 2dc:	88 81       	ld	r24, Y
 2de:	20 81       	ld	r18, Z
				OCR2A = MAGIC_OPTO1_NEG + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	38 2b       	or	r19, r24
 2e4:	ab ea       	ldi	r26, 0xAB	; 171
 2e6:	ba ea       	ldi	r27, 0xAA	; 170
 2e8:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 2ec:	96 95       	lsr	r25
 2ee:	87 95       	ror	r24
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	8e 5a       	subi	r24, 0xAE	; 174
 2f6:	d4 01       	movw	r26, r8
 2f8:	8c 93       	st	X, r24
				if (!(PORT_OPTO2 & (1 << PIN_OPTO2))) // teste para sequência de fase
 2fa:	2a 99       	sbic	0x05, 2	; 5
 2fc:	03 c0       	rjmp	.+6      	; 0x304 <main+0x274>
				{
					// ordem de fase trocada
					phase_sequence_opto3 = COUNTER_CLOCKWISE;
 2fe:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <phase_sequence_opto3>
 302:	02 c0       	rjmp	.+4      	; 0x308 <main+0x278>
				}
				else
				{
					//ordem de fase normal
					phase_sequence_opto3 = CLOCKWISE;
 304:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <phase_sequence_opto3>
{
	TCNT2 = value;
}
static inline void timer2_reset(void)
{
	TCNT2 = 0;
 308:	d3 01       	movw	r26, r6
 30a:	1c 92       	st	X, r1
{
	TIMSK2 |= (1 << OCIE2A);
}
static inline void timer2_start(void)
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
 30c:	d8 01       	movw	r26, r16
 30e:	8c 91       	ld	r24, X
 310:	86 60       	ori	r24, 0x06	; 6
 312:	8c 93       	st	X, r24
			default:
			break;
		}
		

		switch (scr_trigger)
 314:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 318:	83 30       	cpi	r24, 0x03	; 3
 31a:	11 f1       	breq	.+68     	; 0x360 <main+0x2d0>
 31c:	28 f4       	brcc	.+10     	; 0x328 <main+0x298>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	49 f0       	breq	.+18     	; 0x334 <main+0x2a4>
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	91 f0       	breq	.+36     	; 0x34a <main+0x2ba>
 326:	03 cf       	rjmp	.-506    	; 0x12e <main+0x9e>
 328:	85 30       	cpi	r24, 0x05	; 5
 32a:	81 f1       	breq	.+96     	; 0x38c <main+0x2fc>
 32c:	20 f1       	brcs	.+72     	; 0x376 <main+0x2e6>
 32e:	86 30       	cpi	r24, 0x06	; 6
 330:	c1 f1       	breq	.+112    	; 0x3a2 <main+0x312>
 332:	fd ce       	rjmp	.-518    	; 0x12e <main+0x9e>
		{
			case TRIGGER_15:
			PORT_MOC1 |= (1 << PIN_MOC1); // setar pino moc
 334:	5a 9a       	sbi	0x0b, 2	; 11
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 336:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 338:	b5 e8       	ldi	r27, 0x85	; 133
 33a:	ba 95       	dec	r27
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0x2aa>
 33e:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC1 &= ~(1 << PIN_MOC1); // des setar pino
 340:	5a 98       	cbi	0x0b, 2	; 11
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 342:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 344:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 348:	f2 ce       	rjmp	.-540    	; 0x12e <main+0x9e>
			
			case TRIGGER_16:
			PORT_MOC1 |= (1 << PIN_MOC1); // setar pino moc
 34a:	5a 9a       	sbi	0x0b, 2	; 11
			PORT_MOC6 |= (1 << PIN_MOC6); // setar pino moc
 34c:	44 9a       	sbi	0x08, 4	; 8
 34e:	85 e8       	ldi	r24, 0x85	; 133
 350:	8a 95       	dec	r24
 352:	f1 f7       	brne	.-4      	; 0x350 <main+0x2c0>
 354:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC1 &= ~(1 << PIN_MOC1); // des setar pino
 356:	5a 98       	cbi	0x0b, 2	; 11
			PORT_MOC6 &= ~(1 << PIN_MOC6); // des setar pino
 358:	44 98       	cbi	0x08, 4	; 8
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 35a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 35e:	e7 ce       	rjmp	.-562    	; 0x12e <main+0x9e>
			
			case TRIGGER_26:
			PORT_MOC2 |= (1 << PIN_MOC2); // setar pino moc
 360:	58 9a       	sbi	0x0b, 0	; 11
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 362:	59 9a       	sbi	0x0b, 1	; 11
 364:	95 e8       	ldi	r25, 0x85	; 133
 366:	9a 95       	dec	r25
 368:	f1 f7       	brne	.-4      	; 0x366 <main+0x2d6>
 36a:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC2 &= ~(1 << PIN_MOC2); // des setar pino
 36c:	58 98       	cbi	0x0b, 0	; 11
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 36e:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 370:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 374:	dc ce       	rjmp	.-584    	; 0x12e <main+0x9e>
			
			case TRIGGER_24:
			PORT_MOC2 |= (1 << PIN_MOC2); // setar pino moc
 376:	58 9a       	sbi	0x0b, 0	; 11
			PORT_MOC4 |= (1 << PIN_MOC4); // setar pino moc
 378:	5b 9a       	sbi	0x0b, 3	; 11
 37a:	a5 e8       	ldi	r26, 0x85	; 133
 37c:	aa 95       	dec	r26
 37e:	f1 f7       	brne	.-4      	; 0x37c <main+0x2ec>
 380:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC2 &= ~(1 << PIN_MOC2); // des setar pino
 382:	58 98       	cbi	0x0b, 0	; 11
			PORT_MOC4 &= ~(1 << PIN_MOC4); // des setar pino
 384:	5b 98       	cbi	0x0b, 3	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 386:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 38a:	d1 ce       	rjmp	.-606    	; 0x12e <main+0x9e>
			
			case TRIGGER_34:
			PORT_MOC3 |= (1 << PIN_MOC3); // setar pino moc
 38c:	43 9a       	sbi	0x08, 3	; 8
			PORT_MOC4 |= (1 << PIN_MOC4); // setar pino moc
 38e:	5b 9a       	sbi	0x0b, 3	; 11
 390:	b5 e8       	ldi	r27, 0x85	; 133
 392:	ba 95       	dec	r27
 394:	f1 f7       	brne	.-4      	; 0x392 <main+0x302>
 396:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC3 &= ~(1 << PIN_MOC3); // des setar pino
 398:	43 98       	cbi	0x08, 3	; 8
			PORT_MOC4 &= ~(1 << PIN_MOC4); // des setar pino
 39a:	5b 98       	cbi	0x0b, 3	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 39c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 3a0:	c6 ce       	rjmp	.-628    	; 0x12e <main+0x9e>
			
			case TRIGGER_35:
			PORT_MOC3 |= (1 << PIN_MOC3); // setar pino moc
 3a2:	43 9a       	sbi	0x08, 3	; 8
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 3a4:	59 9a       	sbi	0x0b, 1	; 11
 3a6:	85 e8       	ldi	r24, 0x85	; 133
 3a8:	8a 95       	dec	r24
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0x318>
 3ac:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC3 &= ~(1 << PIN_MOC3); // des setar pino
 3ae:	43 98       	cbi	0x08, 3	; 8
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 3b0:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 3b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 3b6:	bb ce       	rjmp	.-650    	; 0x12e <main+0x9e>

000003b8 <__vector_14>:
#include "timer.h"


/* Interrupções dos comparadores dos timers */
ISR(TIMER0_COMPA_vect)
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	8f 93       	push	r24
{
	TCCR0B |= (1 << CS02); // ativar timer com prescaler 256
}
static inline void timer0_stop(void)
{
	TCCR0B &= ~(1 << CS02); // desativar timer
 3c4:	85 b5       	in	r24, 0x25	; 37
 3c6:	8b 7f       	andi	r24, 0xFB	; 251
 3c8:	85 bd       	out	0x25, r24	; 37
	timer0_stop();
	if (last_state_opto1)
 3ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_state_opto1>
 3ce:	88 23       	and	r24, r24
 3d0:	81 f0       	breq	.+32     	; 0x3f2 <__vector_14+0x3a>
	{
		// semiciclo positivo fase a
		if (phase_sequence_opto1 == CLOCKWISE)
 3d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 3d6:	81 11       	cpse	r24, r1
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <__vector_14+0x2a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_15;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3e0:	17 c0       	rjmp	.+46     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		}
		else if (phase_sequence_opto1 == COUNTER_CLOCKWISE)
 3e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	99 f4       	brne	.+38     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_16;
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3f0:	0f c0       	rjmp	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		}
	} 
	else
	{
		// semiciclo positivo fase a
		if (phase_sequence_opto1 == CLOCKWISE)
 3f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 3f6:	81 11       	cpse	r24, r1
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_24;
 3fa:	84 e0       	ldi	r24, 0x04	; 4
 3fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 400:	07 c0       	rjmp	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		}
		else if (phase_sequence_opto1 == COUNTER_CLOCKWISE)
 402:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	19 f4       	brne	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_34;
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}		
	}
	
}
 410:	8f 91       	pop	r24
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	8f 93       	push	r24
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
}
static inline void timer1_stop(void)
{
	TCCR0B &= ~(1 << CS12); // desativar timer
 428:	85 b5       	in	r24, 0x25	; 37
 42a:	8b 7f       	andi	r24, 0xFB	; 251
 42c:	85 bd       	out	0x25, r24	; 37
	timer1_stop();
	if (last_state_opto2)
 42e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_state_opto2>
 432:	88 23       	and	r24, r24
 434:	81 f0       	breq	.+32     	; 0x456 <__vector_11+0x3a>
	{
		// semiciclo positivo fase b
		if (phase_sequence_opto2 == CLOCKWISE)
 436:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 43a:	81 11       	cpse	r24, r1
 43c:	04 c0       	rjmp	.+8      	; 0x446 <__vector_11+0x2a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_26;
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 444:	16 c0       	rjmp	.+44     	; 0x472 <__vector_11+0x56>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 446:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	91 f4       	brne	.+36     	; 0x472 <__vector_11+0x56>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_24;
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 454:	0e c0       	rjmp	.+28     	; 0x472 <__vector_11+0x56>
		}
	}
	else
	{
		// semiciclo positivo fase b
		if (phase_sequence_opto2 == CLOCKWISE)
 456:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 45a:	81 11       	cpse	r24, r1
 45c:	04 c0       	rjmp	.+8      	; 0x466 <__vector_11+0x4a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_35;
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 464:	06 c0       	rjmp	.+12     	; 0x472 <__vector_11+0x56>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 466:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	11 f4       	brne	.+4      	; 0x472 <__vector_11+0x56>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_15;
 46e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
	}
}
 472:	8f 91       	pop	r24
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	8f 93       	push	r24
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
}
static inline void timer2_stop(void)
{
	TCCR2B &= ~(1 << CS22) | (1 << CS21);
 48e:	e1 eb       	ldi	r30, 0xB1	; 177
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	8b 7f       	andi	r24, 0xFB	; 251
 496:	80 83       	st	Z, r24
		
	timer2_stop();
	if (last_state_opto3)
 498:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <last_state_opto3>
 49c:	88 23       	and	r24, r24
 49e:	81 f0       	breq	.+32     	; 0x4c0 <__vector_7+0x42>
	{
		// semiciclo positivo fase c
		if (phase_sequence_opto2 == CLOCKWISE)
 4a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 4a4:	81 11       	cpse	r24, r1
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__vector_7+0x32>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_34;
 4a8:	85 e0       	ldi	r24, 0x05	; 5
 4aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4ae:	17 c0       	rjmp	.+46     	; 0x4de <__vector_7+0x60>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 4b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	99 f4       	brne	.+38     	; 0x4de <__vector_7+0x60>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_35;
 4b8:	86 e0       	ldi	r24, 0x06	; 6
 4ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4be:	0f c0       	rjmp	.+30     	; 0x4de <__vector_7+0x60>
		}
	}
	else
	{
		// semiciclo positivo fase c
		if (phase_sequence_opto2 == CLOCKWISE)
 4c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 4c4:	81 11       	cpse	r24, r1
 4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__vector_7+0x52>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_16;
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4ce:	07 c0       	rjmp	.+14     	; 0x4de <__vector_7+0x60>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 4d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	19 f4       	brne	.+6      	; 0x4de <__vector_7+0x60>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_26;
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
	}
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	8f 91       	pop	r24
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <__umulhisi3>:
 4ee:	a2 9f       	mul	r26, r18
 4f0:	b0 01       	movw	r22, r0
 4f2:	b3 9f       	mul	r27, r19
 4f4:	c0 01       	movw	r24, r0
 4f6:	a3 9f       	mul	r26, r19
 4f8:	70 0d       	add	r23, r0
 4fa:	81 1d       	adc	r24, r1
 4fc:	11 24       	eor	r1, r1
 4fe:	91 1d       	adc	r25, r1
 500:	b2 9f       	mul	r27, r18
 502:	70 0d       	add	r23, r0
 504:	81 1d       	adc	r24, r1
 506:	11 24       	eor	r1, r1
 508:	91 1d       	adc	r25, r1
 50a:	08 95       	ret

0000050c <_exit>:
 50c:	f8 94       	cli

0000050e <__stop_program>:
 50e:	ff cf       	rjmp	.-2      	; 0x50e <__stop_program>
