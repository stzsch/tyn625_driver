
tyn625_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000004d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6a  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000798  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b9  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056e  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ba  00000000  00000000  0000266e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "timer.h"
#include "adc.h"
#include "gpio.h"

int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62


inline void clock_setup(void)
{
	// caso o clock seja 16 MHz, divisor de 2 para todo o Atmega
	CLKPR=0x80;
  9a:	e1 e6       	ldi	r30, 0x61	; 97
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	80 83       	st	Z, r24
	CLKPR=0x01;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	80 83       	st	Z, r24


inline void adc_setup(void)
{
	/* Seleção de modo de tensão de referência. */
	ADMUX |= (1 << REFS0); // Utiliza Avcc como referência
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	
	/* Seleção das portas ligadas ao mux */
	ADMUX |= (1 << MUX1); // ADC2
  b0:	80 81       	ld	r24, Z
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
	
	/* Setup do prescaler, deve estar entre 50 KHz e 200 KHz */
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // Para 8 MHz, um divisor de 64 gera 125 KHz
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	80 83       	st	Z, r24
	
	/* Seleciona modo de funcionamento do ADC. */
	ADCSRA |= (1 << ADATE); // Ativa auto trigger do ADC
  c0:	80 81       	ld	r24, Z
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	80 83       	st	Z, r24
	// ADCSRB &= ~(1 << ADTS2) & ~(1 << ADTS1) & ~(1 << ADTS0) & // Modo Free Running
	
	/* Ativa o ADC */
	ADCSRA |= (1 << ADEN);
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24

	/* Inicia a primeira conversão em modo Free Running */
	ADCSRA |= (1 << ADSC);
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
#define MOC_SIGNAL_DURATION_US	50

inline void gpio_setup(void)
{
	// Configurar pinos dos MOCs como saídas
	DDR_MOC1 |= (1 << PIN_MOC1);
  d2:	52 9a       	sbi	0x0a, 2	; 10
	DDR_MOC2 |= (1 << PIN_MOC2);
  d4:	50 9a       	sbi	0x0a, 0	; 10
	DDR_MOC3 |= (1 << PIN_MOC3);
  d6:	3b 9a       	sbi	0x07, 3	; 7
	DDR_MOC4 |= (1 << PIN_MOC4);
  d8:	53 9a       	sbi	0x0a, 3	; 10
	DDR_MOC5 |= (1 << PIN_MOC5);
  da:	51 9a       	sbi	0x0a, 1	; 10
	DDR_MOC6 |= (1 << PIN_MOC6);
  dc:	3c 9a       	sbi	0x07, 4	; 7
/* Funções relacionadas ao uso dos timers */

/* Funções Timer 0 */
inline void timer0_setup(void)
{
	TIMSK0 |= (1 << OCIE0A); // ativar interrupt do output compare 0A
  de:	ee e6       	ldi	r30, 0x6E	; 110
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	80 83       	st	Z, r24
}

/* Funções Timer 1 */
inline void timer1_setup(void)
{
	TIMSK1 |= (1 << OCIE1A);
  e8:	ef e6       	ldi	r30, 0x6F	; 111
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
}

/* Funções Timer 2 */
inline void timer2_setup(void)
{
	TIMSK2 |= (1 << OCIE2A);
  f2:	e0 e7       	ldi	r30, 0x70	; 112
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
	gpio_setup();
	timer0_setup();
	timer1_setup();
	timer2_setup();

	volatile uint16_t pot_adc = 0;
  fc:	1a 82       	std	Y+2, r1	; 0x02
  fe:	19 82       	std	Y+1, r1	; 0x01
	
	sei(); // inicializa interrupções
 100:	78 94       	sei
		if (1 & (PORT_OPTO1 >> PIN_OPTO1))
		{
				if (last_state_opto1 != 1)
				{
					last_state_opto1 = 1; // muda estado utilizado para testar alterações
					pot_adc = (ADC_POT_H << 7) | (ADC_POT_L << 0); // obtém valor 10 bits do adc (necessita testar)
 102:	49 e7       	ldi	r20, 0x79	; 121
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	e8 e7       	ldi	r30, 0x78	; 120
 108:	f0 e0       	ldi	r31, 0x00	; 0
		{
			if (last_state_opto2 != 1)
			{
				last_state_opto2 = 1; // muda estado utilizado para testar alterações
				pot_adc = (ADC_POT_H << 7) | (ADC_POT_L << 0); // obtém valor 10 bits do adc (necessita testar)
				OCR1AL = MAGIC_OPTO2_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 10a:	0f 2e       	mov	r0, r31
 10c:	f8 e8       	ldi	r31, 0x88	; 136
 10e:	8f 2e       	mov	r8, r31
 110:	91 2c       	mov	r9, r1
 112:	f0 2d       	mov	r31, r0
{
	TCNT1L = value;
}
inline void timer1_reset(void)
{
	TCNT1H = 0;
 114:	0f 2e       	mov	r0, r31
 116:	f5 e8       	ldi	r31, 0x85	; 133
 118:	af 2e       	mov	r10, r31
 11a:	b1 2c       	mov	r11, r1
 11c:	f0 2d       	mov	r31, r0
	TCNT1L = 0;
 11e:	0f 2e       	mov	r0, r31
 120:	f4 e8       	ldi	r31, 0x84	; 132
 122:	cf 2e       	mov	r12, r31
 124:	d1 2c       	mov	r13, r1
 126:	f0 2d       	mov	r31, r0
{
	TIMSK1 |= (1 << OCIE1A);
}
inline void timer1_start(void)
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
 128:	0f 2e       	mov	r0, r31
 12a:	f1 e8       	ldi	r31, 0x81	; 129
 12c:	ef 2e       	mov	r14, r31
 12e:	f1 2c       	mov	r15, r1
 130:	f0 2d       	mov	r31, r0
		{
			if (last_state_opto3 != 1)
			{
				last_state_opto3 = 1; // muda estado utilizado para testar alterações
				pot_adc = (ADC_POT_H << 7) | (ADC_POT_L << 0); // obtém valor 10 bits do adc (necessita testar)
				OCR2A = MAGIC_OPTO3_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 132:	0f 2e       	mov	r0, r31
 134:	f3 eb       	ldi	r31, 0xB3	; 179
 136:	6f 2e       	mov	r6, r31
 138:	71 2c       	mov	r7, r1
 13a:	f0 2d       	mov	r31, r0
{
	TCNT2 = value;
}
inline void timer2_reset(void)
{
	TCNT2 = 0;
 13c:	0f 2e       	mov	r0, r31
 13e:	f2 eb       	ldi	r31, 0xB2	; 178
 140:	4f 2e       	mov	r4, r31
 142:	51 2c       	mov	r5, r1
 144:	f0 2d       	mov	r31, r0
{
	TIMSK2 |= (1 << OCIE2A);
}
inline void timer2_start(void)
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
 146:	01 eb       	ldi	r16, 0xB1	; 177
 148:	10 e0       	ldi	r17, 0x00	; 0
    {			
		if (1 & (PORT_OPTO1 >> PIN_OPTO1))
		{
				if (last_state_opto1 != 1)
				{
					last_state_opto1 = 1; // muda estado utilizado para testar alterações
 14a:	33 24       	eor	r3, r3
 14c:	33 94       	inc	r3
	
	sei(); // inicializa interrupções
	
    while (1) 
    {			
		if (1 & (PORT_OPTO1 >> PIN_OPTO1))
 14e:	2b 9b       	sbis	0x05, 3	; 5
 150:	28 c0       	rjmp	.+80     	; 0x1a2 <main+0x112>
		{
				if (last_state_opto1 != 1)
 152:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_state_opto1>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	29 f1       	breq	.+74     	; 0x1a4 <main+0x114>
				{
					last_state_opto1 = 1; // muda estado utilizado para testar alterações
 15a:	30 92 02 01 	sts	0x0102, r3	; 0x800102 <last_state_opto1>
					pot_adc = (ADC_POT_H << 7) | (ADC_POT_L << 0); // obtém valor 10 bits do adc (necessita testar)
 15e:	da 01       	movw	r26, r20
 160:	8c 91       	ld	r24, X
 162:	20 81       	ld	r18, Z
 164:	b0 e8       	ldi	r27, 0x80	; 128
 166:	8b 9f       	mul	r24, r27
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	82 2b       	or	r24, r18
 16e:	9a 83       	std	Y+2, r25	; 0x02
 170:	89 83       	std	Y+1, r24	; 0x01
					OCR0A = MAGIC_OPTO1_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0 
 172:	29 81       	ldd	r18, Y+1	; 0x01
 174:	3a 81       	ldd	r19, Y+2	; 0x02
 176:	ab ea       	ldi	r26, 0xAB	; 171
 178:	ba ea       	ldi	r27, 0xAA	; 170
 17a:	0e 94 1d 02 	call	0x43a	; 0x43a <__umulhisi3>
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	8e 5a       	subi	r24, 0xAE	; 174
 188:	87 bd       	out	0x27, r24	; 39
					if (!(1 & (PORT_OPTO2 >> PIN_OPTO2))) // teste para sequência de fase
 18a:	2a 99       	sbic	0x05, 2	; 5
 18c:	03 c0       	rjmp	.+6      	; 0x194 <main+0x104>
					{
						// ordem de fase trocada
						phase_sequence_opto1 = COUNTER_CLOCKWISE;
 18e:	30 92 06 01 	sts	0x0106, r3	; 0x800106 <phase_sequence_opto1>
 192:	02 c0       	rjmp	.+4      	; 0x198 <main+0x108>
					}
					else
					{
						//ordem de fase normal
						phase_sequence_opto1 = CLOCKWISE;
 194:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <phase_sequence_opto1>
{
	TCNT0 = value;
}
inline void timer0_reset(void)
{
	TCNT0 = 0;
 198:	16 bc       	out	0x26, r1	; 38
{
	TIMSK0 |= (1 << OCIE0A); // ativar interrupt do output compare 0A
}
inline void timer0_start(void)
{
	TCCR0B |= (1 << CS02); // ativar timer com prescaler 256
 19a:	85 b5       	in	r24, 0x25	; 37
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	85 bd       	out	0x25, r24	; 37
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <main+0x114>
					}
					timer0_reset();
					timer0_start();
				}
		}
		else if (0 & (PORT_OPTO1 >> PIN_OPTO1))
 1a2:	85 b1       	in	r24, 0x05	; 5
					timer0_reset();
					timer0_start();
				}
		}
		
		if (1 & (PORT_OPTO2 >> PIN_OPTO2))
 1a4:	2a 9b       	sbis	0x05, 2	; 5
 1a6:	2d c0       	rjmp	.+90     	; 0x202 <main+0x172>
		{
			if (last_state_opto2 != 1)
 1a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_state_opto2>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	51 f1       	breq	.+84     	; 0x204 <main+0x174>
			{
				last_state_opto2 = 1; // muda estado utilizado para testar alterações
 1b0:	30 92 05 01 	sts	0x0105, r3	; 0x800105 <last_state_opto2>
				pot_adc = (ADC_POT_H << 7) | (ADC_POT_L << 0); // obtém valor 10 bits do adc (necessita testar)
 1b4:	da 01       	movw	r26, r20
 1b6:	8c 91       	ld	r24, X
 1b8:	20 81       	ld	r18, Z
 1ba:	b0 e8       	ldi	r27, 0x80	; 128
 1bc:	8b 9f       	mul	r24, r27
 1be:	c0 01       	movw	r24, r0
 1c0:	11 24       	eor	r1, r1
 1c2:	82 2b       	or	r24, r18
 1c4:	9a 83       	std	Y+2, r25	; 0x02
 1c6:	89 83       	std	Y+1, r24	; 0x01
				OCR1AL = MAGIC_OPTO2_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 1c8:	29 81       	ldd	r18, Y+1	; 0x01
 1ca:	3a 81       	ldd	r19, Y+2	; 0x02
 1cc:	ab ea       	ldi	r26, 0xAB	; 171
 1ce:	ba ea       	ldi	r27, 0xAA	; 170
 1d0:	0e 94 1d 02 	call	0x43a	; 0x43a <__umulhisi3>
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	96 95       	lsr	r25
 1da:	87 95       	ror	r24
 1dc:	8e 5a       	subi	r24, 0xAE	; 174
 1de:	d4 01       	movw	r26, r8
 1e0:	8c 93       	st	X, r24
				if (!(1 & (PORT_OPTO3 >> PIN_OPTO3))) // teste para sequência de fase
 1e2:	29 99       	sbic	0x05, 1	; 5
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <main+0x15c>
				{
					// ordem de fase trocada
					phase_sequence_opto2 = COUNTER_CLOCKWISE;
 1e6:	30 92 04 01 	sts	0x0104, r3	; 0x800104 <phase_sequence_opto2>
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <main+0x160>
				}
				else
				{
					//ordem de fase normal
					phase_sequence_opto2 = CLOCKWISE;
 1ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <phase_sequence_opto2>
{
	TCNT1L = value;
}
inline void timer1_reset(void)
{
	TCNT1H = 0;
 1f0:	d5 01       	movw	r26, r10
 1f2:	1c 92       	st	X, r1
	TCNT1L = 0;
 1f4:	d6 01       	movw	r26, r12
 1f6:	1c 92       	st	X, r1
{
	TIMSK1 |= (1 << OCIE1A);
}
inline void timer1_start(void)
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
 1f8:	d7 01       	movw	r26, r14
 1fa:	8c 91       	ld	r24, X
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	8c 93       	st	X, r24
 200:	01 c0       	rjmp	.+2      	; 0x204 <main+0x174>
				}
				timer1_reset();
				timer1_start();
			}
		}
		else if (0 & (PORT_OPTO2 >> PIN_OPTO2))
 202:	85 b1       	in	r24, 0x05	; 5
				timer1_start();
			}
		}
		
		
		if (1 & (PORT_OPTO3 >> PIN_OPTO3))
 204:	29 9b       	sbis	0x05, 1	; 5
 206:	2b c0       	rjmp	.+86     	; 0x25e <main+0x1ce>
		{
			if (last_state_opto3 != 1)
 208:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <last_state_opto3>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	41 f1       	breq	.+80     	; 0x260 <main+0x1d0>
			{
				last_state_opto3 = 1; // muda estado utilizado para testar alterações
 210:	30 92 03 01 	sts	0x0103, r3	; 0x800103 <last_state_opto3>
				pot_adc = (ADC_POT_H << 7) | (ADC_POT_L << 0); // obtém valor 10 bits do adc (necessita testar)
 214:	da 01       	movw	r26, r20
 216:	8c 91       	ld	r24, X
 218:	20 81       	ld	r18, Z
 21a:	b0 e8       	ldi	r27, 0x80	; 128
 21c:	8b 9f       	mul	r24, r27
 21e:	c0 01       	movw	r24, r0
 220:	11 24       	eor	r1, r1
 222:	82 2b       	or	r24, r18
 224:	9a 83       	std	Y+2, r25	; 0x02
 226:	89 83       	std	Y+1, r24	; 0x01
				OCR2A = MAGIC_OPTO3_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 228:	29 81       	ldd	r18, Y+1	; 0x01
 22a:	3a 81       	ldd	r19, Y+2	; 0x02
 22c:	ab ea       	ldi	r26, 0xAB	; 171
 22e:	ba ea       	ldi	r27, 0xAA	; 170
 230:	0e 94 1d 02 	call	0x43a	; 0x43a <__umulhisi3>
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	8e 5a       	subi	r24, 0xAE	; 174
 23e:	d3 01       	movw	r26, r6
 240:	8c 93       	st	X, r24
				if (!(1 & (PORT_OPTO1 >> PIN_OPTO1))) // teste para sequência de fase
 242:	2b 99       	sbic	0x05, 3	; 5
 244:	03 c0       	rjmp	.+6      	; 0x24c <main+0x1bc>
				{
					// ordem de fase trocada
					phase_sequence_opto3 = COUNTER_CLOCKWISE;
 246:	30 92 01 01 	sts	0x0101, r3	; 0x800101 <phase_sequence_opto3>
 24a:	02 c0       	rjmp	.+4      	; 0x250 <main+0x1c0>
				}
				else
				{
					//ordem de fase normal
					phase_sequence_opto3 = CLOCKWISE;
 24c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <phase_sequence_opto3>
{
	TCNT2 = value;
}
inline void timer2_reset(void)
{
	TCNT2 = 0;
 250:	d2 01       	movw	r26, r4
 252:	1c 92       	st	X, r1
{
	TIMSK2 |= (1 << OCIE2A);
}
inline void timer2_start(void)
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
 254:	d8 01       	movw	r26, r16
 256:	8c 91       	ld	r24, X
 258:	86 60       	ori	r24, 0x06	; 6
 25a:	8c 93       	st	X, r24
 25c:	01 c0       	rjmp	.+2      	; 0x260 <main+0x1d0>
				}
				timer2_reset();
				timer2_start();
			}
		}
		else if (0 & (PORT_OPTO3 >> PIN_OPTO3))
 25e:	85 b1       	in	r24, 0x05	; 5
				timer2_start();
			}
		}
		

		switch (scr_trigger)
 260:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	11 f1       	breq	.+68     	; 0x2ac <main+0x21c>
 268:	28 f4       	brcc	.+10     	; 0x274 <main+0x1e4>
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	49 f0       	breq	.+18     	; 0x280 <main+0x1f0>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	91 f0       	breq	.+36     	; 0x296 <main+0x206>
 272:	6d cf       	rjmp	.-294    	; 0x14e <main+0xbe>
 274:	85 30       	cpi	r24, 0x05	; 5
 276:	81 f1       	breq	.+96     	; 0x2d8 <main+0x248>
 278:	20 f1       	brcs	.+72     	; 0x2c2 <main+0x232>
 27a:	86 30       	cpi	r24, 0x06	; 6
 27c:	c1 f1       	breq	.+112    	; 0x2ee <main+0x25e>
 27e:	67 cf       	rjmp	.-306    	; 0x14e <main+0xbe>
		{
			case TRIGGER_15:
			PORT_MOC1 |= (1 << PIN_MOC1); // setar pino moc
 280:	5a 9a       	sbi	0x0b, 2	; 11
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 282:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	b5 e8       	ldi	r27, 0x85	; 133
 286:	ba 95       	dec	r27
 288:	f1 f7       	brne	.-4      	; 0x286 <main+0x1f6>
 28a:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC1 &= ~(1 << PIN_MOC1); // des setar pino
 28c:	5a 98       	cbi	0x0b, 2	; 11
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 28e:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 290:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 294:	5c cf       	rjmp	.-328    	; 0x14e <main+0xbe>
			
			case TRIGGER_16:
			PORT_MOC1 |= (1 << PIN_MOC1); // setar pino moc
 296:	5a 9a       	sbi	0x0b, 2	; 11
			PORT_MOC6 |= (1 << PIN_MOC6); // setar pino moc
 298:	44 9a       	sbi	0x08, 4	; 8
 29a:	35 e8       	ldi	r19, 0x85	; 133
 29c:	3a 95       	dec	r19
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x20c>
 2a0:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC1 &= ~(1 << PIN_MOC1); // des setar pino
 2a2:	5a 98       	cbi	0x0b, 2	; 11
			PORT_MOC6 &= ~(1 << PIN_MOC6); // des setar pino
 2a4:	44 98       	cbi	0x08, 4	; 8
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 2a6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 2aa:	51 cf       	rjmp	.-350    	; 0x14e <main+0xbe>
			
			case TRIGGER_26:
			PORT_MOC2 |= (1 << PIN_MOC2); // setar pino moc
 2ac:	58 9a       	sbi	0x0b, 0	; 11
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 2ae:	59 9a       	sbi	0x0b, 1	; 11
 2b0:	85 e8       	ldi	r24, 0x85	; 133
 2b2:	8a 95       	dec	r24
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0x222>
 2b6:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC2 &= ~(1 << PIN_MOC2); // des setar pino
 2b8:	58 98       	cbi	0x0b, 0	; 11
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 2ba:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 2bc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 2c0:	46 cf       	rjmp	.-372    	; 0x14e <main+0xbe>
			
			case TRIGGER_24:
			PORT_MOC2 |= (1 << PIN_MOC2); // setar pino moc
 2c2:	58 9a       	sbi	0x0b, 0	; 11
			PORT_MOC4 |= (1 << PIN_MOC4); // setar pino moc
 2c4:	5b 9a       	sbi	0x0b, 3	; 11
 2c6:	a5 e8       	ldi	r26, 0x85	; 133
 2c8:	aa 95       	dec	r26
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <main+0x238>
 2cc:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC2 &= ~(1 << PIN_MOC2); // des setar pino
 2ce:	58 98       	cbi	0x0b, 0	; 11
			PORT_MOC4 &= ~(1 << PIN_MOC4); // des setar pino
 2d0:	5b 98       	cbi	0x0b, 3	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 2d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 2d6:	3b cf       	rjmp	.-394    	; 0x14e <main+0xbe>
			
			case TRIGGER_34:
			PORT_MOC3 |= (1 << PIN_MOC3); // setar pino moc
 2d8:	43 9a       	sbi	0x08, 3	; 8
			PORT_MOC4 |= (1 << PIN_MOC4); // setar pino moc
 2da:	5b 9a       	sbi	0x0b, 3	; 11
 2dc:	b5 e8       	ldi	r27, 0x85	; 133
 2de:	ba 95       	dec	r27
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x24e>
 2e2:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC3 &= ~(1 << PIN_MOC3); // des setar pino
 2e4:	43 98       	cbi	0x08, 3	; 8
			PORT_MOC4 &= ~(1 << PIN_MOC4); // des setar pino
 2e6:	5b 98       	cbi	0x0b, 3	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 2e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 2ec:	30 cf       	rjmp	.-416    	; 0x14e <main+0xbe>
			
			case TRIGGER_35:
			PORT_MOC3 |= (1 << PIN_MOC3); // setar pino moc
 2ee:	43 9a       	sbi	0x08, 3	; 8
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 2f0:	59 9a       	sbi	0x0b, 1	; 11
 2f2:	35 e8       	ldi	r19, 0x85	; 133
 2f4:	3a 95       	dec	r19
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0x264>
 2f8:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC3 &= ~(1 << PIN_MOC3); // des setar pino
 2fa:	43 98       	cbi	0x08, 3	; 8
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 2fc:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 2fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 302:	25 cf       	rjmp	.-438    	; 0x14e <main+0xbe>

00000304 <__vector_14>:
#include "timer.h"


/* Interrupções dos comparadores dos timers */
ISR(TIMER0_COMPA_vect)
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	8f 93       	push	r24
{
	TCCR0B |= (1 << CS02); // ativar timer com prescaler 256
}
inline void timer0_stop(void)
{
	TCCR0B &= ~(1 << CS02); // desativar timer
 310:	85 b5       	in	r24, 0x25	; 37
 312:	8b 7f       	andi	r24, 0xFB	; 251
 314:	85 bd       	out	0x25, r24	; 37
	timer0_stop();
	if (last_state_opto1)
 316:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_state_opto1>
 31a:	88 23       	and	r24, r24
 31c:	81 f0       	breq	.+32     	; 0x33e <__vector_14+0x3a>
	{
		// semiciclo positivo fase a
		if (phase_sequence_opto1 == CLOCKWISE)
 31e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 322:	81 11       	cpse	r24, r1
 324:	04 c0       	rjmp	.+8      	; 0x32e <__vector_14+0x2a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_15;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 32c:	17 c0       	rjmp	.+46     	; 0x35c <__vector_14+0x58>
		}
		else if (phase_sequence_opto1 == COUNTER_CLOCKWISE)
 32e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	99 f4       	brne	.+38     	; 0x35c <__vector_14+0x58>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_16;
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 33c:	0f c0       	rjmp	.+30     	; 0x35c <__vector_14+0x58>
		}
	} 
	else
	{
		// semiciclo positivo fase a
		if (phase_sequence_opto1 == CLOCKWISE)
 33e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 342:	81 11       	cpse	r24, r1
 344:	04 c0       	rjmp	.+8      	; 0x34e <__vector_14+0x4a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_24;
 346:	84 e0       	ldi	r24, 0x04	; 4
 348:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 34c:	07 c0       	rjmp	.+14     	; 0x35c <__vector_14+0x58>
		}
		else if (phase_sequence_opto1 == COUNTER_CLOCKWISE)
 34e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	19 f4       	brne	.+6      	; 0x35c <__vector_14+0x58>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_34;
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}		
	}
	
}
 35c:	8f 91       	pop	r24
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	8f 93       	push	r24
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
}
inline void timer1_stop(void)
{
	TCCR0B &= ~(1 << CS12); // desativar timer
 374:	85 b5       	in	r24, 0x25	; 37
 376:	8b 7f       	andi	r24, 0xFB	; 251
 378:	85 bd       	out	0x25, r24	; 37
	timer1_stop();
	if (last_state_opto2)
 37a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_state_opto2>
 37e:	88 23       	and	r24, r24
 380:	81 f0       	breq	.+32     	; 0x3a2 <__vector_11+0x3a>
	{
		// semiciclo positivo fase b
		if (phase_sequence_opto2 == CLOCKWISE)
 382:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 386:	81 11       	cpse	r24, r1
 388:	04 c0       	rjmp	.+8      	; 0x392 <__vector_11+0x2a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_26;
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 390:	16 c0       	rjmp	.+44     	; 0x3be <__vector_11+0x56>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 392:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	91 f4       	brne	.+36     	; 0x3be <__vector_11+0x56>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_24;
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3a0:	0e c0       	rjmp	.+28     	; 0x3be <__vector_11+0x56>
		}
	}
	else
	{
		// semiciclo positivo fase b
		if (phase_sequence_opto2 == CLOCKWISE)
 3a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 3a6:	81 11       	cpse	r24, r1
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <__vector_11+0x4a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_35;
 3aa:	86 e0       	ldi	r24, 0x06	; 6
 3ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3b0:	06 c0       	rjmp	.+12     	; 0x3be <__vector_11+0x56>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 3b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	11 f4       	brne	.+4      	; 0x3be <__vector_11+0x56>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_15;
 3ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
	}
}
 3be:	8f 91       	pop	r24
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	8f 93       	push	r24
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
}
inline void timer2_stop(void)
{
	TCCR2B &= ~(1 << CS22) | (1 << CS21);
 3da:	e1 eb       	ldi	r30, 0xB1	; 177
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	8b 7f       	andi	r24, 0xFB	; 251
 3e2:	80 83       	st	Z, r24
		
	timer2_stop();
	if (last_state_opto3)
 3e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <last_state_opto3>
 3e8:	88 23       	and	r24, r24
 3ea:	81 f0       	breq	.+32     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{
		// semiciclo positivo fase c
		if (phase_sequence_opto2 == CLOCKWISE)
 3ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 3f0:	81 11       	cpse	r24, r1
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <__vector_7+0x32>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_34;
 3f4:	85 e0       	ldi	r24, 0x05	; 5
 3f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3fa:	17 c0       	rjmp	.+46     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 3fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	99 f4       	brne	.+38     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_35;
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 40a:	0f c0       	rjmp	.+30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		}
	}
	else
	{
		// semiciclo positivo fase c
		if (phase_sequence_opto2 == CLOCKWISE)
 40c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 410:	81 11       	cpse	r24, r1
 412:	04 c0       	rjmp	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_16;
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 41a:	07 c0       	rjmp	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 41c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	19 f4       	brne	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_26;
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
	}
}
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	8f 91       	pop	r24
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__umulhisi3>:
 43a:	a2 9f       	mul	r26, r18
 43c:	b0 01       	movw	r22, r0
 43e:	b3 9f       	mul	r27, r19
 440:	c0 01       	movw	r24, r0
 442:	a3 9f       	mul	r26, r19
 444:	70 0d       	add	r23, r0
 446:	81 1d       	adc	r24, r1
 448:	11 24       	eor	r1, r1
 44a:	91 1d       	adc	r25, r1
 44c:	b2 9f       	mul	r27, r18
 44e:	70 0d       	add	r23, r0
 450:	81 1d       	adc	r24, r1
 452:	11 24       	eor	r1, r1
 454:	91 1d       	adc	r25, r1
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
