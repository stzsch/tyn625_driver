
tyn625_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000057e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000057e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c99  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000794  00000000  00000000  000012d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000745  00000000  00000000  00001a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000021b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b0  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000316  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002b1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 83 02 	jmp	0x506	; 0x506 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


static inline void adc_setup(void)
{
	/* Seleção de modo de tensão de referência. */
	ADMUX |= (1 << REFS0); // Utiliza Avcc como referência
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	
	/* Seleção das portas ligadas ao mux */
	ADMUX |= (1 << MUX1); // ADC2
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
	
	/* Setup do prescaler, deve estar entre 50 KHz e 200 KHz */
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // Para 8 MHz, um divisor de 64 gera 125 KHz
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	86 60       	ori	r24, 0x06	; 6
  a8:	80 83       	st	Z, r24
	
	/* Seleciona modo de funcionamento do ADC. */
	ADCSRA |= (1 << ADATE); // Ativa auto trigger do ADC
  aa:	80 81       	ld	r24, Z
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	80 83       	st	Z, r24
	// ADCSRB &= ~(1 << ADTS2) & ~(1 << ADTS1) & ~(1 << ADTS0) & // Modo Free Running
	
	/* Ativa o ADC */
	ADCSRA |= (1 << ADEN);
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24

	/* Inicia a primeira conversão em modo Free Running */
	ADCSRA |= (1 << ADSC);
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
#define MOC_SIGNAL_DURATION_US	50

static inline void gpio_setup(void)
{
	// Configurar pinos dos MOCs como saídas
	DDR_MOC1 |= (1 << PIN_MOC1);
  bc:	52 9a       	sbi	0x0a, 2	; 10
	DDR_MOC2 |= (1 << PIN_MOC2);
  be:	50 9a       	sbi	0x0a, 0	; 10
	DDR_MOC3 |= (1 << PIN_MOC3);
  c0:	3b 9a       	sbi	0x07, 3	; 7
	DDR_MOC4 |= (1 << PIN_MOC4);
  c2:	53 9a       	sbi	0x0a, 3	; 10
	DDR_MOC5 |= (1 << PIN_MOC5);
  c4:	51 9a       	sbi	0x0a, 1	; 10
	DDR_MOC6 |= (1 << PIN_MOC6);
  c6:	3c 9a       	sbi	0x07, 4	; 7
/* Funções relacionadas ao uso dos timers */

/* Funções Timer 0 */
static inline void timer0_setup(void)
{
	TIMSK0 |= (1 << OCIE0A); // ativar interrupt do output compare 0A
  c8:	ee e6       	ldi	r30, 0x6E	; 110
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
}

/* Funções Timer 1 */
static inline void timer1_setup(void)
{
	TIMSK1 |= (1 << OCIE1A);
  d2:	ef e6       	ldi	r30, 0x6F	; 111
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
}

/* Funções Timer 2 */
static inline void timer2_setup(void)
{
	TIMSK2 |= (1 << OCIE2A);
  dc:	e0 e7       	ldi	r30, 0x70	; 112
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	timer1_setup();
	timer2_setup();

	uint16_t pot_adc = 0;
	
	sei(); // inicializa interrupções
  e6:	78 94       	sei
		{
			case 1:
				if (last_state_opto1 != 1)
				{
					last_state_opto1 = 1; // muda estado utilizado para testar alterações
					pot_adc = (ADCH << 8) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
  e8:	c9 e7       	ldi	r28, 0x79	; 121
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	e8 e7       	ldi	r30, 0x78	; 120
  ee:	f0 e0       	ldi	r31, 0x00	; 0
			case 0:
			if (last_state_opto2 != 0)
			{
				last_state_opto2 = 0; // muda estado utilizado para testar alterações
				pot_adc = (ADC_POT_H << 7) | (ADC_POT_L << 0); // obtém valor 10 bits do adc (necessita testar)
				OCR1AL = MAGIC_OPTO1_NEG + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
  f0:	0f 2e       	mov	r0, r31
  f2:	f8 e8       	ldi	r31, 0x88	; 136
  f4:	af 2e       	mov	r10, r31
  f6:	b1 2c       	mov	r11, r1
  f8:	f0 2d       	mov	r31, r0
{
	TCNT1L = value;
}
static inline void timer1_reset(void)
{
	TCNT1H = 0;
  fa:	0f 2e       	mov	r0, r31
  fc:	f5 e8       	ldi	r31, 0x85	; 133
  fe:	cf 2e       	mov	r12, r31
 100:	d1 2c       	mov	r13, r1
 102:	f0 2d       	mov	r31, r0
	TCNT1L = 0;
 104:	0f 2e       	mov	r0, r31
 106:	f4 e8       	ldi	r31, 0x84	; 132
 108:	ef 2e       	mov	r14, r31
 10a:	f1 2c       	mov	r15, r1
 10c:	f0 2d       	mov	r31, r0
{
	TIMSK1 |= (1 << OCIE1A);
}
static inline void timer1_start(void)
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
 10e:	41 e8       	ldi	r20, 0x81	; 129
 110:	50 e0       	ldi	r21, 0x00	; 0
			case 0:
			if (last_state_opto1 != 0)
			{
				last_state_opto1 = 0; // muda estado utilizado para testar alterações
				pot_adc = (ADCH << 8) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
				OCR2A = MAGIC_OPTO1_NEG + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 112:	0f 2e       	mov	r0, r31
 114:	f3 eb       	ldi	r31, 0xB3	; 179
 116:	8f 2e       	mov	r8, r31
 118:	91 2c       	mov	r9, r1
 11a:	f0 2d       	mov	r31, r0
{
	TCNT2 = value;
}
static inline void timer2_reset(void)
{
	TCNT2 = 0;
 11c:	0f 2e       	mov	r0, r31
 11e:	f2 eb       	ldi	r31, 0xB2	; 178
 120:	6f 2e       	mov	r6, r31
 122:	71 2c       	mov	r7, r1
 124:	f0 2d       	mov	r31, r0
{
	TIMSK2 |= (1 << OCIE2A);
}
static inline void timer2_start(void)
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
 126:	01 eb       	ldi	r16, 0xB1	; 177
 128:	10 e0       	ldi	r17, 0x00	; 0
		switch (PORT_OPTO1 & (1 << PIN_OPTO1))
		{
			case 1:
				if (last_state_opto1 != 1)
				{
					last_state_opto1 = 1; // muda estado utilizado para testar alterações
 12a:	55 24       	eor	r5, r5
 12c:	53 94       	inc	r5
	
	sei(); // inicializa interrupções
	
    while (1) 
    {			
		switch (PORT_OPTO1 & (1 << PIN_OPTO1))
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	98 2f       	mov	r25, r24
 132:	98 70       	andi	r25, 0x08	; 8
 134:	83 ff       	sbrs	r24, 3
 136:	23 c0       	rjmp	.+70     	; 0x17e <main+0xee>
 138:	91 30       	cpi	r25, 0x01	; 1
 13a:	09 f0       	breq	.+2      	; 0x13e <main+0xae>
 13c:	3f c0       	rjmp	.+126    	; 0x1bc <main+0x12c>
		{
			case 1:
				if (last_state_opto1 != 1)
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_state_opto1>
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	d9 f1       	breq	.+118    	; 0x1bc <main+0x12c>
				{
					last_state_opto1 = 1; // muda estado utilizado para testar alterações
 146:	50 92 02 01 	sts	0x0102, r5	; 0x800102 <last_state_opto1>
					pot_adc = (ADCH << 8) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
 14a:	88 81       	ld	r24, Y
 14c:	20 81       	ld	r18, Z
					OCR0A = MAGIC_OPTO1_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0 
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	38 2b       	or	r19, r24
 152:	ab ea       	ldi	r26, 0xAB	; 171
 154:	ba ea       	ldi	r27, 0xAA	; 170
 156:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__umulhisi3>
 15a:	96 95       	lsr	r25
 15c:	87 95       	ror	r24
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	8e 5a       	subi	r24, 0xAE	; 174
 164:	87 bd       	out	0x27, r24	; 39
					if (!(PORT_OPTO2 & (1 << PIN_OPTO2))) // teste para sequência de fase
 166:	2a 99       	sbic	0x05, 2	; 5
 168:	03 c0       	rjmp	.+6      	; 0x170 <main+0xe0>
					{
						// ordem de fase trocada
						phase_sequence_opto1 = COUNTER_CLOCKWISE;
 16a:	50 92 06 01 	sts	0x0106, r5	; 0x800106 <phase_sequence_opto1>
 16e:	02 c0       	rjmp	.+4      	; 0x174 <main+0xe4>
					}
					else
					{
						//ordem de fase normal
						phase_sequence_opto1 = CLOCKWISE;
 170:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <phase_sequence_opto1>
{
	TCNT0 = value;
}
static inline void timer0_reset(void)
{
	TCNT0 = 0;
 174:	16 bc       	out	0x26, r1	; 38
{
	TIMSK0 |= (1 << OCIE0A); // ativar interrupt do output compare 0A
}
static inline void timer0_start(void)
{
	TCCR0B |= (1 << CS02); // ativar timer com prescaler 256
 176:	85 b5       	in	r24, 0x25	; 37
 178:	84 60       	ori	r24, 0x04	; 4
 17a:	85 bd       	out	0x25, r24	; 37
 17c:	1f c0       	rjmp	.+62     	; 0x1bc <main+0x12c>
					timer0_start();
				}
			break;
			
			case 0:
				if (last_state_opto1 != 0)
 17e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_state_opto1>
 182:	88 23       	and	r24, r24
 184:	d9 f0       	breq	.+54     	; 0x1bc <main+0x12c>
				{
					last_state_opto1 = 0; // muda estado utilizado para testar alterações
 186:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <last_state_opto1>
					pot_adc = (ADCH << 8) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
 18a:	88 81       	ld	r24, Y
 18c:	20 81       	ld	r18, Z
					OCR0A = MAGIC_OPTO1_NEG + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	38 2b       	or	r19, r24
 192:	ab ea       	ldi	r26, 0xAB	; 171
 194:	ba ea       	ldi	r27, 0xAA	; 170
 196:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__umulhisi3>
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	8e 5a       	subi	r24, 0xAE	; 174
 1a4:	87 bd       	out	0x27, r24	; 39
					if (!(PORT_OPTO3 & (1 << PIN_OPTO3)))
 1a6:	29 99       	sbic	0x05, 1	; 5
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <main+0x120>
					{
						// ordem de fase trocada
						phase_sequence_opto1 = COUNTER_CLOCKWISE;
 1aa:	50 92 06 01 	sts	0x0106, r5	; 0x800106 <phase_sequence_opto1>
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x124>
					}
					else
					{
						//ordem de fase normal
						phase_sequence_opto1 = CLOCKWISE;
 1b0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <phase_sequence_opto1>
{
	TCNT0 = value;
}
static inline void timer0_reset(void)
{
	TCNT0 = 0;
 1b4:	16 bc       	out	0x26, r1	; 38
{
	TIMSK0 |= (1 << OCIE0A); // ativar interrupt do output compare 0A
}
static inline void timer0_start(void)
{
	TCCR0B |= (1 << CS02); // ativar timer com prescaler 256
 1b6:	85 b5       	in	r24, 0x25	; 37
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	85 bd       	out	0x25, r24	; 37
			default:
			break;
		}
		
		
		switch (PORT_OPTO2 & (1 << PIN_OPTO2))
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	98 2f       	mov	r25, r24
 1c0:	94 70       	andi	r25, 0x04	; 4
 1c2:	82 ff       	sbrs	r24, 2
 1c4:	2c c0       	rjmp	.+88     	; 0x21e <main+0x18e>
 1c6:	91 30       	cpi	r25, 0x01	; 1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <main+0x13c>
 1ca:	50 c0       	rjmp	.+160    	; 0x26c <main+0x1dc>
		{
			case 1:
			if (last_state_opto2 != 1)
 1cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_state_opto2>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <main+0x146>
 1d4:	4b c0       	rjmp	.+150    	; 0x26c <main+0x1dc>
			{
				last_state_opto2 = 1; // muda estado utilizado para testar alterações
 1d6:	50 92 05 01 	sts	0x0105, r5	; 0x800105 <last_state_opto2>
				pot_adc = (ADCH << 7) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
 1da:	28 81       	ld	r18, Y
 1dc:	80 81       	ld	r24, Z
				OCR1AL = MAGIC_OPTO1_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 1de:	90 e8       	ldi	r25, 0x80	; 128
 1e0:	29 9f       	mul	r18, r25
 1e2:	90 01       	movw	r18, r0
 1e4:	11 24       	eor	r1, r1
 1e6:	28 2b       	or	r18, r24
 1e8:	ab ea       	ldi	r26, 0xAB	; 171
 1ea:	ba ea       	ldi	r27, 0xAA	; 170
 1ec:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__umulhisi3>
 1f0:	96 95       	lsr	r25
 1f2:	87 95       	ror	r24
 1f4:	96 95       	lsr	r25
 1f6:	87 95       	ror	r24
 1f8:	8e 5a       	subi	r24, 0xAE	; 174
 1fa:	d5 01       	movw	r26, r10
 1fc:	8c 93       	st	X, r24
				if (!(PORT_OPTO3 & (1 << PIN_OPTO3))) // teste para sequência de fase
 1fe:	29 99       	sbic	0x05, 1	; 5
 200:	03 c0       	rjmp	.+6      	; 0x208 <main+0x178>
				{
					// ordem de fase trocada
					phase_sequence_opto2 = COUNTER_CLOCKWISE;
 202:	50 92 04 01 	sts	0x0104, r5	; 0x800104 <phase_sequence_opto2>
 206:	02 c0       	rjmp	.+4      	; 0x20c <main+0x17c>
				}
				else
				{
					//ordem de fase normal
					phase_sequence_opto2 = CLOCKWISE;
 208:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <phase_sequence_opto2>
{
	TCNT1L = value;
}
static inline void timer1_reset(void)
{
	TCNT1H = 0;
 20c:	d6 01       	movw	r26, r12
 20e:	1c 92       	st	X, r1
	TCNT1L = 0;
 210:	d7 01       	movw	r26, r14
 212:	1c 92       	st	X, r1
{
	TIMSK1 |= (1 << OCIE1A);
}
static inline void timer1_start(void)
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
 214:	da 01       	movw	r26, r20
 216:	8c 91       	ld	r24, X
 218:	84 60       	ori	r24, 0x04	; 4
 21a:	8c 93       	st	X, r24
 21c:	27 c0       	rjmp	.+78     	; 0x26c <main+0x1dc>
				timer1_start();
			}
			break;
			
			case 0:
			if (last_state_opto2 != 0)
 21e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_state_opto2>
 222:	88 23       	and	r24, r24
 224:	19 f1       	breq	.+70     	; 0x26c <main+0x1dc>
			{
				last_state_opto2 = 0; // muda estado utilizado para testar alterações
 226:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <last_state_opto2>
				pot_adc = (ADC_POT_H << 7) | (ADC_POT_L << 0); // obtém valor 10 bits do adc (necessita testar)
 22a:	28 81       	ld	r18, Y
 22c:	80 81       	ld	r24, Z
				OCR1AL = MAGIC_OPTO1_NEG + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 22e:	b0 e8       	ldi	r27, 0x80	; 128
 230:	2b 9f       	mul	r18, r27
 232:	90 01       	movw	r18, r0
 234:	11 24       	eor	r1, r1
 236:	28 2b       	or	r18, r24
 238:	ab ea       	ldi	r26, 0xAB	; 171
 23a:	ba ea       	ldi	r27, 0xAA	; 170
 23c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__umulhisi3>
 240:	96 95       	lsr	r25
 242:	87 95       	ror	r24
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	8e 5a       	subi	r24, 0xAE	; 174
 24a:	d5 01       	movw	r26, r10
 24c:	8c 93       	st	X, r24
				if (!(PORT_OPTO1 & (1 << PIN_OPTO1))) // teste para sequência de fase
 24e:	2b 99       	sbic	0x05, 3	; 5
 250:	03 c0       	rjmp	.+6      	; 0x258 <main+0x1c8>
				{
					// ordem de fase trocada
					phase_sequence_opto2 = COUNTER_CLOCKWISE;
 252:	50 92 04 01 	sts	0x0104, r5	; 0x800104 <phase_sequence_opto2>
 256:	02 c0       	rjmp	.+4      	; 0x25c <main+0x1cc>
				}
				else
				{
					//ordem de fase normal
					phase_sequence_opto2 = CLOCKWISE;
 258:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <phase_sequence_opto2>
{
	TCNT1L = value;
}
static inline void timer1_reset(void)
{
	TCNT1H = 0;
 25c:	d6 01       	movw	r26, r12
 25e:	1c 92       	st	X, r1
	TCNT1L = 0;
 260:	d7 01       	movw	r26, r14
 262:	1c 92       	st	X, r1
{
	TIMSK1 |= (1 << OCIE1A);
}
static inline void timer1_start(void)
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
 264:	da 01       	movw	r26, r20
 266:	8c 91       	ld	r24, X
 268:	84 60       	ori	r24, 0x04	; 4
 26a:	8c 93       	st	X, r24
			default:
			break;
		}
		
		
		switch (PORT_OPTO3 & (1 << PIN_OPTO3))
 26c:	85 b1       	in	r24, 0x05	; 5
 26e:	98 2f       	mov	r25, r24
 270:	92 70       	andi	r25, 0x02	; 2
 272:	81 ff       	sbrs	r24, 1
 274:	2a c0       	rjmp	.+84     	; 0x2ca <main+0x23a>
 276:	91 30       	cpi	r25, 0x01	; 1
 278:	09 f0       	breq	.+2      	; 0x27c <main+0x1ec>
 27a:	49 c0       	rjmp	.+146    	; 0x30e <main+0x27e>
		{
			case 1:
			if (last_state_opto3 != 1)
 27c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <last_state_opto3>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	09 f4       	brne	.+2      	; 0x286 <main+0x1f6>
 284:	44 c0       	rjmp	.+136    	; 0x30e <main+0x27e>
			{
				last_state_opto3 = 1; // muda estado utilizado para testar alterações
 286:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <last_state_opto3>
				pot_adc = (ADCH << 7) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
 28a:	28 81       	ld	r18, Y
 28c:	80 81       	ld	r24, Z
				OCR2A = MAGIC_OPTO1_POS + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 28e:	b0 e8       	ldi	r27, 0x80	; 128
 290:	2b 9f       	mul	r18, r27
 292:	90 01       	movw	r18, r0
 294:	11 24       	eor	r1, r1
 296:	28 2b       	or	r18, r24
 298:	ab ea       	ldi	r26, 0xAB	; 171
 29a:	ba ea       	ldi	r27, 0xAA	; 170
 29c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__umulhisi3>
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	96 95       	lsr	r25
 2a6:	87 95       	ror	r24
 2a8:	8e 5a       	subi	r24, 0xAE	; 174
 2aa:	d4 01       	movw	r26, r8
 2ac:	8c 93       	st	X, r24
				if (!(PORT_OPTO1 & (1 << PIN_OPTO1))) // teste para sequência de fase
 2ae:	2b 99       	sbic	0x05, 3	; 5
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <main+0x228>
				{
					// ordem de fase trocada
					phase_sequence_opto3 = COUNTER_CLOCKWISE;
 2b2:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <phase_sequence_opto3>
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <main+0x22c>
				}
				else
				{
					//ordem de fase normal
					phase_sequence_opto3 = CLOCKWISE;
 2b8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <phase_sequence_opto3>
{
	TCNT2 = value;
}
static inline void timer2_reset(void)
{
	TCNT2 = 0;
 2bc:	d3 01       	movw	r26, r6
 2be:	1c 92       	st	X, r1
{
	TIMSK2 |= (1 << OCIE2A);
}
static inline void timer2_start(void)
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
 2c0:	d8 01       	movw	r26, r16
 2c2:	8c 91       	ld	r24, X
 2c4:	86 60       	ori	r24, 0x06	; 6
 2c6:	8c 93       	st	X, r24
 2c8:	22 c0       	rjmp	.+68     	; 0x30e <main+0x27e>
				timer2_start();
			}
			break;
			
			case 0:
			if (last_state_opto1 != 0)
 2ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_state_opto1>
 2ce:	88 23       	and	r24, r24
 2d0:	f1 f0       	breq	.+60     	; 0x30e <main+0x27e>
			{
				last_state_opto1 = 0; // muda estado utilizado para testar alterações
 2d2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <last_state_opto1>
				pot_adc = (ADCH << 8) | (ADCL << 0); // obtém valor 10 bits do adc (necessita testar)
 2d6:	88 81       	ld	r24, Y
 2d8:	20 81       	ld	r18, Z
				OCR2A = MAGIC_OPTO1_NEG + pot_adc / POT_DIVISOR; // seta o compare para o timer 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	38 2b       	or	r19, r24
 2de:	ab ea       	ldi	r26, 0xAB	; 171
 2e0:	ba ea       	ldi	r27, 0xAA	; 170
 2e2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__umulhisi3>
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	96 95       	lsr	r25
 2ec:	87 95       	ror	r24
 2ee:	8e 5a       	subi	r24, 0xAE	; 174
 2f0:	d4 01       	movw	r26, r8
 2f2:	8c 93       	st	X, r24
				if (!(PORT_OPTO2 & (1 << PIN_OPTO2))) // teste para sequência de fase
 2f4:	2a 99       	sbic	0x05, 2	; 5
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <main+0x26e>
				{
					// ordem de fase trocada
					phase_sequence_opto3 = COUNTER_CLOCKWISE;
 2f8:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <phase_sequence_opto3>
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <main+0x272>
				}
				else
				{
					//ordem de fase normal
					phase_sequence_opto3 = CLOCKWISE;
 2fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <phase_sequence_opto3>
{
	TCNT2 = value;
}
static inline void timer2_reset(void)
{
	TCNT2 = 0;
 302:	d3 01       	movw	r26, r6
 304:	1c 92       	st	X, r1
{
	TIMSK2 |= (1 << OCIE2A);
}
static inline void timer2_start(void)
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
 306:	d8 01       	movw	r26, r16
 308:	8c 91       	ld	r24, X
 30a:	86 60       	ori	r24, 0x06	; 6
 30c:	8c 93       	st	X, r24
		

		// decidir se vou usar isso aqui ou simplesmente os interrupts


		switch (scr_trigger)
 30e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	11 f1       	breq	.+68     	; 0x35a <main+0x2ca>
 316:	28 f4       	brcc	.+10     	; 0x322 <main+0x292>
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	49 f0       	breq	.+18     	; 0x32e <main+0x29e>
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	91 f0       	breq	.+36     	; 0x344 <main+0x2b4>
 320:	06 cf       	rjmp	.-500    	; 0x12e <main+0x9e>
 322:	85 30       	cpi	r24, 0x05	; 5
 324:	81 f1       	breq	.+96     	; 0x386 <main+0x2f6>
 326:	20 f1       	brcs	.+72     	; 0x370 <main+0x2e0>
 328:	86 30       	cpi	r24, 0x06	; 6
 32a:	c1 f1       	breq	.+112    	; 0x39c <main+0x30c>
 32c:	00 cf       	rjmp	.-512    	; 0x12e <main+0x9e>
		{
			case TRIGGER_15:
			PORT_MOC1 |= (1 << PIN_MOC1); // setar pino moc
 32e:	5a 9a       	sbi	0x0b, 2	; 11
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 330:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	b5 e8       	ldi	r27, 0x85	; 133
 334:	ba 95       	dec	r27
 336:	f1 f7       	brne	.-4      	; 0x334 <main+0x2a4>
 338:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC1 &= ~(1 << PIN_MOC1); // des setar pino
 33a:	5a 98       	cbi	0x0b, 2	; 11
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 33c:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 33e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 342:	f5 ce       	rjmp	.-534    	; 0x12e <main+0x9e>
			
			case TRIGGER_16:
			PORT_MOC1 |= (1 << PIN_MOC1); // setar pino moc
 344:	5a 9a       	sbi	0x0b, 2	; 11
			PORT_MOC6 |= (1 << PIN_MOC6); // setar pino moc
 346:	44 9a       	sbi	0x08, 4	; 8
 348:	85 e8       	ldi	r24, 0x85	; 133
 34a:	8a 95       	dec	r24
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x2ba>
 34e:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC1 &= ~(1 << PIN_MOC1); // des setar pino
 350:	5a 98       	cbi	0x0b, 2	; 11
			PORT_MOC6 &= ~(1 << PIN_MOC6); // des setar pino
 352:	44 98       	cbi	0x08, 4	; 8
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 354:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 358:	ea ce       	rjmp	.-556    	; 0x12e <main+0x9e>
			
			case TRIGGER_26:
			PORT_MOC2 |= (1 << PIN_MOC2); // setar pino moc
 35a:	58 9a       	sbi	0x0b, 0	; 11
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 35c:	59 9a       	sbi	0x0b, 1	; 11
 35e:	95 e8       	ldi	r25, 0x85	; 133
 360:	9a 95       	dec	r25
 362:	f1 f7       	brne	.-4      	; 0x360 <main+0x2d0>
 364:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC2 &= ~(1 << PIN_MOC2); // des setar pino
 366:	58 98       	cbi	0x0b, 0	; 11
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 368:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 36a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 36e:	df ce       	rjmp	.-578    	; 0x12e <main+0x9e>
			
			case TRIGGER_24:
			PORT_MOC2 |= (1 << PIN_MOC2); // setar pino moc
 370:	58 9a       	sbi	0x0b, 0	; 11
			PORT_MOC4 |= (1 << PIN_MOC4); // setar pino moc
 372:	5b 9a       	sbi	0x0b, 3	; 11
 374:	a5 e8       	ldi	r26, 0x85	; 133
 376:	aa 95       	dec	r26
 378:	f1 f7       	brne	.-4      	; 0x376 <main+0x2e6>
 37a:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC2 &= ~(1 << PIN_MOC2); // des setar pino
 37c:	58 98       	cbi	0x0b, 0	; 11
			PORT_MOC4 &= ~(1 << PIN_MOC4); // des setar pino
 37e:	5b 98       	cbi	0x0b, 3	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 380:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 384:	d4 ce       	rjmp	.-600    	; 0x12e <main+0x9e>
			
			case TRIGGER_34:
			PORT_MOC3 |= (1 << PIN_MOC3); // setar pino moc
 386:	43 9a       	sbi	0x08, 3	; 8
			PORT_MOC4 |= (1 << PIN_MOC4); // setar pino moc
 388:	5b 9a       	sbi	0x0b, 3	; 11
 38a:	b5 e8       	ldi	r27, 0x85	; 133
 38c:	ba 95       	dec	r27
 38e:	f1 f7       	brne	.-4      	; 0x38c <main+0x2fc>
 390:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC3 &= ~(1 << PIN_MOC3); // des setar pino
 392:	43 98       	cbi	0x08, 3	; 8
			PORT_MOC4 &= ~(1 << PIN_MOC4); // des setar pino
 394:	5b 98       	cbi	0x0b, 3	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 396:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 39a:	c9 ce       	rjmp	.-622    	; 0x12e <main+0x9e>
			
			case TRIGGER_35:
			PORT_MOC3 |= (1 << PIN_MOC3); // setar pino moc
 39c:	43 9a       	sbi	0x08, 3	; 8
			PORT_MOC5 |= (1 << PIN_MOC5); // setar pino moc
 39e:	59 9a       	sbi	0x0b, 1	; 11
 3a0:	85 e8       	ldi	r24, 0x85	; 133
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <main+0x312>
 3a6:	00 00       	nop
			_delay_us(MOC_SIGNAL_DURATION_US); // delay 50 us
			PORT_MOC3 &= ~(1 << PIN_MOC3); // des setar pino
 3a8:	43 98       	cbi	0x08, 3	; 8
			PORT_MOC5 &= ~(1 << PIN_MOC5); // des setar pino
 3aa:	59 98       	cbi	0x0b, 1	; 11
			scr_trigger = OFF;	// setar estado trigger de volta para OFF
 3ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 3b0:	be ce       	rjmp	.-644    	; 0x12e <main+0x9e>

000003b2 <__vector_14>:
#include "timer.h"


/* Interrupções dos comparadores dos timers */
ISR(TIMER0_COMPA_vect)
{
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	8f 93       	push	r24
{
	TCCR0B |= (1 << CS02); // ativar timer com prescaler 256
}
static inline void timer0_stop(void)
{
	TCCR0B &= ~(1 << CS02); // desativar timer
 3be:	85 b5       	in	r24, 0x25	; 37
 3c0:	8b 7f       	andi	r24, 0xFB	; 251
 3c2:	85 bd       	out	0x25, r24	; 37
	timer0_stop();
	if (last_state_opto1)
 3c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_state_opto1>
 3c8:	88 23       	and	r24, r24
 3ca:	81 f0       	breq	.+32     	; 0x3ec <__vector_14+0x3a>
	{
		// semiciclo positivo fase a
		if (phase_sequence_opto1 == CLOCKWISE)
 3cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 3d0:	81 11       	cpse	r24, r1
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <__vector_14+0x2a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_15;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3da:	17 c0       	rjmp	.+46     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		}
		else if (phase_sequence_opto1 == COUNTER_CLOCKWISE)
 3dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	99 f4       	brne	.+38     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_16;
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3ea:	0f c0       	rjmp	.+30     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		}
	} 
	else
	{
		// semiciclo positivo fase a
		if (phase_sequence_opto1 == CLOCKWISE)
 3ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 3f0:	81 11       	cpse	r24, r1
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <__vector_14+0x4a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_24;
 3f4:	84 e0       	ldi	r24, 0x04	; 4
 3f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3fa:	07 c0       	rjmp	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		}
		else if (phase_sequence_opto1 == COUNTER_CLOCKWISE)
 3fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <phase_sequence_opto1>
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	19 f4       	brne	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_34;
 404:	85 e0       	ldi	r24, 0x05	; 5
 406:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}		
	}
	
}
 40a:	8f 91       	pop	r24
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	8f 93       	push	r24
{
	TCCR1B |= (1 << CS12); // ativar timer com prescaler 256
}
static inline void timer1_stop(void)
{
	TCCR0B &= ~(1 << CS12); // desativar timer
 422:	85 b5       	in	r24, 0x25	; 37
 424:	8b 7f       	andi	r24, 0xFB	; 251
 426:	85 bd       	out	0x25, r24	; 37
	timer1_stop();
	if (last_state_opto2)
 428:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_state_opto2>
 42c:	88 23       	and	r24, r24
 42e:	81 f0       	breq	.+32     	; 0x450 <__vector_11+0x3a>
	{
		// semiciclo positivo fase b
		if (phase_sequence_opto2 == CLOCKWISE)
 430:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 434:	81 11       	cpse	r24, r1
 436:	04 c0       	rjmp	.+8      	; 0x440 <__vector_11+0x2a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_26;
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 43e:	16 c0       	rjmp	.+44     	; 0x46c <__vector_11+0x56>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 440:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	91 f4       	brne	.+36     	; 0x46c <__vector_11+0x56>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_24;
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 44e:	0e c0       	rjmp	.+28     	; 0x46c <__vector_11+0x56>
		}
	}
	else
	{
		// semiciclo positivo fase b
		if (phase_sequence_opto2 == CLOCKWISE)
 450:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 454:	81 11       	cpse	r24, r1
 456:	04 c0       	rjmp	.+8      	; 0x460 <__vector_11+0x4a>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_35;
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 45e:	06 c0       	rjmp	.+12     	; 0x46c <__vector_11+0x56>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 460:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	11 f4       	brne	.+4      	; 0x46c <__vector_11+0x56>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_15;
 468:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
	}
}
 46c:	8f 91       	pop	r24
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_7>:

ISR(TIMER2_COMPA_vect)
{
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	8f 93       	push	r24
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
{
	TCCR2B |= (1 << CS22) | (1 << CS21);
}
static inline void timer2_stop(void)
{
	TCCR2B &= ~(1 << CS22) | (1 << CS21);
 488:	e1 eb       	ldi	r30, 0xB1	; 177
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	8b 7f       	andi	r24, 0xFB	; 251
 490:	80 83       	st	Z, r24
		
	timer2_stop();
	if (last_state_opto3)
 492:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <last_state_opto3>
 496:	88 23       	and	r24, r24
 498:	81 f0       	breq	.+32     	; 0x4ba <__vector_7+0x42>
	{
		// semiciclo positivo fase c
		if (phase_sequence_opto2 == CLOCKWISE)
 49a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 49e:	81 11       	cpse	r24, r1
 4a0:	04 c0       	rjmp	.+8      	; 0x4aa <__vector_7+0x32>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_34;
 4a2:	85 e0       	ldi	r24, 0x05	; 5
 4a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4a8:	17 c0       	rjmp	.+46     	; 0x4d8 <__vector_7+0x60>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 4aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	99 f4       	brne	.+38     	; 0x4d8 <__vector_7+0x60>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_35;
 4b2:	86 e0       	ldi	r24, 0x06	; 6
 4b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4b8:	0f c0       	rjmp	.+30     	; 0x4d8 <__vector_7+0x60>
		}
	}
	else
	{
		// semiciclo positivo fase c
		if (phase_sequence_opto2 == CLOCKWISE)
 4ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 4be:	81 11       	cpse	r24, r1
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <__vector_7+0x52>
		{
			// ordem de fase normal
			scr_trigger = TRIGGER_16;
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <__vector_7+0x60>
		}
		else if (phase_sequence_opto2 == COUNTER_CLOCKWISE)
 4ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <phase_sequence_opto2>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	19 f4       	brne	.+6      	; 0x4d8 <__vector_7+0x60>
		{
			// ordem de fase trocada
			scr_trigger = TRIGGER_26;
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
	}
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	8f 91       	pop	r24
 4de:	0f 90       	pop	r0
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <__umulhisi3>:
 4e8:	a2 9f       	mul	r26, r18
 4ea:	b0 01       	movw	r22, r0
 4ec:	b3 9f       	mul	r27, r19
 4ee:	c0 01       	movw	r24, r0
 4f0:	a3 9f       	mul	r26, r19
 4f2:	70 0d       	add	r23, r0
 4f4:	81 1d       	adc	r24, r1
 4f6:	11 24       	eor	r1, r1
 4f8:	91 1d       	adc	r25, r1
 4fa:	b2 9f       	mul	r27, r18
 4fc:	70 0d       	add	r23, r0
 4fe:	81 1d       	adc	r24, r1
 500:	11 24       	eor	r1, r1
 502:	91 1d       	adc	r25, r1
 504:	08 95       	ret

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
